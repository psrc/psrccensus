[{"path":[]},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"background","dir":"Articles","previous_headings":"Reliability measures for ACS estimates","what":"Background","title":"Reliability Measures for ACS data tables","text":"vignette explains calculate reliability measures ACS estimates. American Community Survey (ACS), household travel survey, population surveys samples population usually less 10% population answering survey. surveys sample, several sources potential error sampling error, nonresponse error, coverage error, measurement error, processing error.document Census concepts apply ACS. data team wanted develop set rough guidelines help team analysts better understanding specifically mean sample quality issues needs examined additional scrutiny. coefficient variation (CV) measures relative amount sampling error associated sample estimate. CV calculated ratio SE estimate estimate usually expressed percent. internal recommendation understanding CVs : CV <= 15% good CV >15% <=30% fair CV >30% <=50% estimate used caution CV >50% examine great caution whether usable Note since ACS household travel survey reported using 90 percent confidence interval, Margin Error (MOE) reported place standard error, can convert standard error dividing 1.645. breakpoints based guidance Census Bureau [National Center Transit Research] (https://www.nctr.usf.edu/wp-content/uploads/2010/04/77802.pdf). important analysts consider nuances datasets understand potential sources error estimates. internal categories part ongoing conversation may change.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"reliability-is-provided-on-data-tables-retrieved-via-psrccensus","dir":"Articles","previous_headings":"Reliability measures for ACS estimates","what":"Reliability is provided on data tables retrieved via psrccensus","title":"Reliability Measures for ACS data tables","text":"psrccensus library contains functionality added provide coefficients variation, standard errors, reliability labels ACS data retrieved directly api. Every ACS data table output psrccensus via function get_acs_recs() includes fields standard error, coefficient variation, reliability. often need transform variables come ACS get need summarize, directly built psrccensus.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"how-to-calculate-reliability-estimates-on-transformed-acs-dataframes","dir":"Articles","previous_headings":"Reliability measures for ACS estimates","what":"How to calculate reliability estimates on transformed ACS dataframes","title":"Reliability Measures for ACS data tables","text":"calculate reliability using psrccensus, user transformed tables, may want apply function reliability_calcs(). function requires dataframe, column holding margins error, column holding estimate. need pre-calculated margin error transformed, along way able retrieve reliability estimate. stage calculation aggregation, need re-calculate margins error. R library tidycensus built functions re-calculating margins error data transformation. recommend users rely functions derive margins error data needs aggregated. Another option code margin error calculations user defined functions. background types calculations performed tidycensus margins error, can also read document Census Common functions tidycensus calculating margins error, following: moe_product: Calculate margin error derived product moe_prop(): Calculate margin error derived proportion moe_ratio() Calculate margin error derived ratio moe_sum() Calculate margin error derived sum (difference)","code":""},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"example-housing-cost-burden","dir":"Articles","previous_headings":"Reliability measures for ACS estimates","what":"Example: Housing Cost Burden","title":"Reliability Measures for ACS data tables","text":"example, want retrieve percent households cost-burdened Census tract. Cost-burdened defined case spending 30% household income housing costs. data used create map Census Tract show areas greater housing cost burden geographically. summary, first need aggregate data provided households spending 30% based available fields-Less 10.0 percent,10.0 14.9 percent, 15.0 19.9 percent, 20.0 24.9 percent, 25.0 29.9 percent. summed items group provide numerator calculation. Next need redefine total remove values compute- denominator. need calculate shares. data transformation, need recalculate margin error.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"read-in-libraries","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Read in Libraries","title":"Reliability Measures for ACS data tables","text":"","code":"library(psrccensus) ## Have you updated tidycensus since the release date of the data you'll use? ## devtools::install_github('walkerke/tidycensus') ## library(tidycensus) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr)"},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"get-the-data-from-the-acs-api-via-psrccensus","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Get the data from the ACS api via psrccensus","title":"Reliability Measures for ACS data tables","text":"","code":"# Finding the corresponding ACS table - this works if you know the correct concept label. If not, another option would be to visit https://data.census.gov/table and search for the right subject table and skip to the next step ---- #x <- tidycensus::load_variables(2021,\"acs5\") %>%  # dplyr::filter(grepl(\"percent\", #                    concept, ignore.case=TRUE) &  #               (geography==\"tract\"))  # getting data by tract acs_data <- get_acs_recs(geography ='tract',                           table.names = 'B25070', #subject table code                          years = c(2021),                          acs.type = 'acs5') ## Getting data from the 2017-2021 5-year ACS ## Loading ACS5 variables for 2021 from table B25070. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset."},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"add-a-grouping","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Add a grouping","title":"Reliability Measures for ACS data tables","text":"","code":"# data wrangling for grouping >30% and under 30% - census tract and population acs_data <- acs_data %>% rename_at('label', ~'rent_burden')  # Create variables acs_data <- acs_data %>%    mutate(rent_burden_group=factor(     case_when(grepl(\"Less than 10.0 percent|10.0 to 14.9 percent|15.0 to 19.9 percent|                     20.0 to 24.9 percent|25.0 to 29.9 percent\", rent_burden) ~                     \"Less than 30 percent\",               grepl(\"30.0 to 34.9 percent|35.0 to 39.9 percent|35.0 to 39.9 percent|                     40.0 to 49.9 percent|50.0 percent or more\", rent_burden) ~                    \"Cost Burdened (More than 30 percent)\",               grepl(\"Not computed\", rent_burden) ~ \"Not computed\",               !is.na(rent_burden) ~ \"Total\")))"},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"aggregate-and-calculate","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Aggregate and calculate","title":"Reliability Measures for ACS data tables","text":"moe_sum uses tidycensus.","code":"# filter only fields of interest - census tract and estimate  # use the moe_sum function from tidycensus acs_data_group <- acs_data %>%    dplyr::group_by(GEOID, rent_burden_group)%>%   dplyr::summarise(estimate=sum(estimate),                     moe=tidycensus::moe_sum(estimate=estimate, moe=moe)) ## `summarise()` has grouped output by 'GEOID'. You can override using the ## `.groups` argument."},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"data-wrangling","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Data wrangling","title":"Reliability Measures for ACS data tables","text":"","code":"# pivot data to calculate percentage by census tract, calculate estimates  acs_data_group<- acs_data_group%>%      pivot_wider(names_from = rent_burden_group, values_from = c(estimate,moe))%>%   rename('estimate_cost_burdened'='estimate_Cost Burdened (More than 30 percent)',          'moe_cost_burdened'= 'moe_Cost Burdened (More than 30 percent)')  # weight averages for population & calculating percentage/share of population per tract instead of integer acs_data_group<-  acs_data_group%>%   mutate(estimate_new_total=(estimate_Total-`estimate_Not computed`))%>%   mutate(estimate_perc_cost_burdened=((estimate_cost_burdened/estimate_new_total)))"},{"path":"https://psrc.github.io/psrccensus/articles/calculate-reliability-moe-transformed-acs.html","id":"calculate-margins-of-error","dir":"Articles","previous_headings":"Reliability measures for ACS estimates > Example: Housing Cost Burden","what":"Calculate margins of error","title":"Reliability Measures for ACS data tables","text":"applying function across columns, opposed grouped rows, need apply function rowwise. need data pivoted. Note moe_sum applied although taking difference. moe_prop applied finding shares. Now data ready joined tract map, desired.","code":"#calculate moes acs_data_group<- acs_data_group%>%   rowwise()%>%   mutate(moe_new_total=moe_sum(estimate=c(estimate_Total, `estimate_Not computed`),                                 moe=c(moe_Total,`moe_Not computed`)))%>%   mutate(moe_perc_cost_burdened=moe_prop(num=estimate_cost_burdened,                               denom=estimate_new_total, moe_num=moe_cost_burdened, moe_denom=moe_new_total))   acs_data_final<- acs_data_group %>%    dplyr::select(GEOID, estimate_cost_burdened, estimate_new_total, estimate_perc_cost_burdened,                 moe_cost_burdened, moe_new_total, moe_perc_cost_burdened) %>%   dplyr::filter(!is.na(estimate_cost_burdened))  acs_data_final<-reliability_calcs(acs_data_final, estimate='estimate_perc_cost_burdened',                                    moe='moe_perc_cost_burdened')  head(acs_data_final%>%select(GEOID, estimate_perc_cost_burdened, reliability)) ## # A tibble: 6 × 3 ## # Rowwise:  GEOID ##   GEOID       estimate_perc_cost_burdened reliability      ##   <chr>                             <dbl> <chr>            ## 1 53033000101                       0.298 fair             ## 2 53033000102                       0.325 fair             ## 3 53033000201                       0.339 fair             ## 4 53033000202                       0.241 use with caution ## 5 53033000300                       0.313 use with caution ## 6 53033000402                       0.292 fair"},{"path":"https://psrc.github.io/psrccensus/articles/geographic-conversions.html","id":"geographic-conversion-via-a-granular-proxy-variable","dir":"Articles","previous_headings":"","what":"Geographic conversion via a granular proxy variable","title":"Census estimates for non-census geographies","text":"geographic precision, effect disaggregate estimate granular scale–specifically, parcel–assuming estimate direct proportion either variable reported scale (housing units), one several population measures can apportion scale (e.g. OFM total population). mind, PSRC developed demographic ratios convert estimates Census geographies planning geographies. planning geography function: Regional Growth Strategy classes - census_to_rgs() Regional Growth Centers - census_to_rgc() Manufacturing-Industrial Centers - census_to_mic() Traffic Analysis Zones - census_to_taz() High Capacity Transit Station areas - census_to_hct() long ’re using default proxy variable (total population), need single argument: name dataframe (returned get_acs_recs() get_decennial_recs()) wish convert.","code":"library(psrccensus) #> Have you updated tidycensus since the release date of the data you'll use? #> devtools::install_github('walkerke/tidycensus') library(magrittr)  x <- get_acs_recs(geography = 'block group',                   table.names = 'B03002',                   years = 2021,                   acs.type = 'acs5') %>%    dplyr::mutate(label=stringr::str_replace_all(label,\"(^Estimate!!|Total:!!)\",\"\"))  x %>% dplyr::filter(variable==\"B03002_012\") %>% .[,c(1,5:8)] %>% head() #> # A tibble: 6 × 5 #>   GEOID        variable   estimate   moe label               #>   <chr>        <chr>         <dbl> <dbl> <chr>               #> 1 530330001011 B03002_012       28    33 Hispanic or Latino: #> 2 530330001012 B03002_012      188   176 Hispanic or Latino: #> 3 530330001013 B03002_012       48    50 Hispanic or Latino: #> 4 530330001021 B03002_012        0    13 Hispanic or Latino: #> 5 530330001022 B03002_012      181   206 Hispanic or Latino: #> 6 530330001023 B03002_012      110   151 Hispanic or Latino:  rgc_race <- census_to_rgc(x)  rgc_race %>% dplyr::filter(variable==\"B03002_012\") %>% .[,c(1,3,7:8)] %>% head() #>                      planning_geog               label estimate   moe #>                             <char>              <char>    <num> <num> #> 1:   not in regional growth center Hispanic or Latino:   416251  9537 #> 2:               Seattle Northgate Hispanic or Latino:      719   327 #> 3:    Seattle University Community Hispanic or Latino:     1946   392 #> 4:                  Seattle Uptown Hispanic or Latino:      673   227 #> 5: Seattle First Hill/Capitol Hill Hispanic or Latino:     3318   625 #> 6:        Seattle South Lake Union Hispanic or Latino:      380   211"},{"path":"https://psrc.github.io/psrccensus/articles/geographic-conversions.html","id":"selecting-the-correct-proxy","dir":"Articles","previous_headings":"","what":"Selecting the correct proxy","title":"Census estimates for non-census geographies","text":"key assumption behind method direct relationship granular proxy variable Census variable interest: stronger relationship, defensible result. splitting geography, consider metrics relevant Census estimate interest: total_pop –.e. total population (default) household_pop group_quarters_pop housing_units occupied_housing_units can specify using wgt argument: dataframe combines tables appropriately apply two different proxy metrics–example, one linked total population, another linked housing units–might divide dataframe (alter code retrieve separate tables originally) applying geographic conversion.","code":"y <- get_acs_recs(geography = 'tract',                   table.names = 'B26001',                   years = 2019,                   acs.type = 'acs5') %>%    dplyr::mutate(label=stringr::str_replace_all(label,\"(^Estimate!!|Total:!!)\",\"\"))  y %>% .[,c(1,5:8)] %>% head() #> # A tibble: 6 × 5 #>   GEOID       estimate   moe label  concept                   #>   <chr>          <dbl> <dbl> <chr>  <chr>                     #> 1 53033000100       38    24 Total: GROUP QUARTERS POPULATION #> 2 53033000200       87   150 Total: GROUP QUARTERS POPULATION #> 3 53033000300       16     5 Total: GROUP QUARTERS POPULATION #> 4 53033000401       89    32 Total: GROUP QUARTERS POPULATION #> 5 53033000402      239   151 Total: GROUP QUARTERS POPULATION #> 6 53033000500       21    20 Total: GROUP QUARTERS POPULATION  rgc_gq_age <- census_to_rgs(y, wgt=\"group_quarters_pop\")  rgc_gq_age %>% .[,c(1,3,4,7,8)] #>    planning_geog  label                   concept estimate   moe #>           <char> <char>                    <char>    <num> <num> #> 1:         Rural Total: GROUP QUARTERS POPULATION     4848   547 #> 2:         Metro Total: GROUP QUARTERS POPULATION    38944  1818 #> 3:           HCT Total: GROUP QUARTERS POPULATION     8117   617 #> 4:          Core Total: GROUP QUARTERS POPULATION    11580   843 #> 5:            UU Total: GROUP QUARTERS POPULATION     7224   733 #> 6:   CitiesTowns Total: GROUP QUARTERS POPULATION     4945   441"},{"path":"https://psrc.github.io/psrccensus/articles/geographic-conversions.html","id":"error-margins-limitations","dir":"Articles","previous_headings":"","what":"Error margins & limitations","title":"Census estimates for non-census geographies","text":"Currently, split-derived calculations limited estimates ; medians determined via method. Analysts can calculate shares converting estimates numerator denominator appropriate geography. Although may harder assume Margins Error (MOE) directly proportional split weight, assumption applied identically estimate MOE, seemed best choice available options.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/geographic-conversions.html","id":"further-geographies","dir":"Articles","previous_headings":"","what":"Further geographies","title":"Census estimates for non-census geographies","text":"set planning geographies strictly limited five listed ; approval, set can expanded (see documentation - PSRC VPN required view). realize also need split Census estimates using custom geographies besides central PSRC’s planning (involved jurisdictional data requests). considering several methods future update page links documentation methods.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/get-data.html","id":"get-acs-data","dir":"Articles","previous_headings":"","what":"Get ACS data","title":"Get Data","text":"Suppose wish tabulate ACS one-year 2019 data estimates total people race ethnicity, provided table B03002 PSRC counties. use following function call:","code":"get_acs_recs(geography = 'county',              table.names = 'B03002',              years = 2019,              acs.type = 'acs1') ## # A tibble: 105 × 14 ##    GEOID name       state variable estimate   moe label concept census_geography ##    <chr> <chr>      <chr> <chr>       <dbl> <dbl> <chr> <chr>   <chr>            ##  1 53033 King Coun… Wash… B03002_…  2252782    NA Esti… HISPAN… County           ##  2 53033 King Coun… Wash… B03002_…  2030140    NA Esti… HISPAN… County           ##  3 53033 King Coun… Wash… B03002_…  1302544  3208 Esti… HISPAN… County           ##  4 53033 King Coun… Wash… B03002_…   147822  4678 Esti… HISPAN… County           ##  5 53033 King Coun… Wash… B03002_…    13321  1990 Esti… HISPAN… County           ##  6 53033 King Coun… Wash… B03002_…   424590  7085 Esti… HISPAN… County           ##  7 53033 King Coun… Wash… B03002_…    15702  1831 Esti… HISPAN… County           ##  8 53033 King Coun… Wash… B03002_…     6574  3281 Esti… HISPAN… County           ##  9 53033 King Coun… Wash… B03002_…   119587  8804 Esti… HISPAN… County           ## 10 53033 King Coun… Wash… B03002_…     2639  1744 Esti… HISPAN… County           ## # ℹ 95 more rows ## # ℹ 5 more variables: acs_type <chr>, year <dbl>, se <dbl>, cv <dbl>, ## #   reliability <chr>"},{"path":"https://psrc.github.io/psrccensus/articles/get-data.html","id":"default-and-custom-arguments","dir":"Articles","previous_headings":"Get ACS data","what":"Default and custom arguments","title":"Get Data","text":"default, without specifying counties, jurisdictions returned King, Kitsap, Pierce, Snohomish Counties. Use ?get_acs_recs() default values implemented function. retrieve non-PSRC counties subset default counties, use counties argument provide vector counties (e.g. counties = c(\"King\", \"Thurston\")). use fips argument reserved MSA place geographies.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/get-data.html","id":"get-census-data","dir":"Articles","previous_headings":"","what":"Get Census data","title":"Get Data","text":"get_decennial_recs() generate Decennial Census tables operates similarly get_acs_recs(). wanted retrieve housing units total population MSA, call following: Note: table names padded 0s, call “H001” opposed “H1” Elmer. SF1 tables currently implemented.","code":"get_decennial_recs(geography = 'msa',                    table_codes = c(\"H001\", \"P001\"),                    years = c(2010),                    fips = c('42660', \"28420\")) ## # A tibble: 4 × 7 ##   GEOID NAME                                 variable  value  year label concept ##   <chr> <chr>                                <chr>     <dbl> <dbl> <chr> <chr>   ## 1 28420 Kennewick-Pasco-Richland, WA Metro … H001001  9.30e4  2010 Total HOUSIN… ## 2 42660 Seattle-Tacoma-Bellevue, WA Metro A… H001001  1.46e6  2010 Total HOUSIN… ## 3 28420 Kennewick-Pasco-Richland, WA Metro … P001001  2.53e5  2010 Total TOTAL … ## 4 42660 Seattle-Tacoma-Bellevue, WA Metro A… P001001  3.44e6  2010 Total TOTAL …"},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"primary-functions","dir":"Articles","previous_headings":"","what":"Primary Functions","title":"Getting Started","text":"three important functions : get_acs_recs() get_decennial_recs() “functions getting Census tables”) get_psrc_pums() “function getting Public Use Microsample Data”) use psrccensus, first need get API key.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"set-up-your-api-key","dir":"Articles","previous_headings":"","what":"Set up your API Key","title":"Getting Started","text":"key required access Census API. haven’t done , set Census API Key environment variable store .Renviron file. Obtain Census API key : https://api.census.gov/data/key_signup.html. two methods set key: run Sys.setenv() Census API Key need run Sys.getenv(). alternative method install key .Renviron File repeated use. done via tidycensus package. benefit call Sys.getenv() everytime run script scripts using psrccensus tidycensus. Next need decide tables like download summarize. hardest part find correct table code, decide geography, years.","code":"library(psrccensus) ## #Sys.setenv(CENSUS_API_KEY = 'PUT YOUR KEY HERE') Sys.getenv(\"CENSUS_API_KEY\") # first time, run once in console. Then restart R tidycensus::census_api_key('your api key', install = TRUE)"},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"finding-tables-and-their-variables","dir":"Articles","previous_headings":"","what":"Finding Tables and their Variables","title":"Getting Started","text":"One helpful website finding tables topic ACS Census : https://censusreporter.org/ Many frequently used Census/ACS/PUMS tables nicely described wiki. Note Census table names Elmer given two character code “H2”. psrccensus, consistent tidycensus package, codes must padded zeroes “H2” becomes “H002”. 2010 Census Table Names 2019 ACS Table Names","code":""},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"variable-lists","dir":"Articles","previous_headings":"Finding Tables and their Variables","what":"Variable Lists","title":"Getting Started","text":"can also search API variable lists ACS Census. 2020 Census: https://www.census.gov/data/developers/data-sets/decennial-census.html 2019 ACS 1-year: https://api.census.gov/data/2019/acs/acs1/variables.html 2015-2019 ACS 5-year: https://api.census.gov/data/2019/acs/acs5/variables.html 2010 Census: https://www.census.gov/data/developers/data-sets/decennial-census.html","code":""},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"which-variables-are-available-in-which-year-in-acs-and-census","dir":"Articles","previous_headings":"Finding Tables and their Variables","what":"Which variables are available in which year in ACS and Census?","title":"Getting Started","text":"2020 Census data differs 2010 Census datasets. Changes 2020 Census datasets: https://www2.census.gov/programs-surveys/decennial/2020/program-management/2010_20_data_product_release_dates.pdf Generally, ACS 1-year data available geographies populations 65,000 , can easily get 1-year data counties region, example. want go tract-level, 5-year ACS data appropriate. Decennial Census data available block level. Functions currently psrccensus return data Washington State county, tract, MSA, place levels. access geographies, consider using tidycensus directly.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/psrccensus.html","id":"get-data","dir":"Articles","previous_headings":"","what":"Get Data","title":"Getting Started","text":"View Get Data vignette (Articles) use primary functions. View Calculate PUMS Summaries vignette (Articles) learn create aggregations PUMS data region.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"what-is-census-microdata","dir":"Articles","previous_headings":"","what":"What is Census microdata?","title":"PUMS 1: Calculate basic summaries","text":"Along publishing summary statistics decennial Census American Community Survey (ACS), Census Bureau also makes available subset individual person housing (incl. household) records, called Public Use Microdata Sample (PUMS). can used estimate models tabulate custom statistics unavailable Census-published summary statistics. Partly safeguard privacy, PUMS data categorized standard Census geographies block, block group tract; instead unit Public Use Microdata Area (PUMA), aggregation tracts total population 100,000-200,000. past one set PUMAs, corresponding different sampling rates; longer case (PUMAs now consistently represent 5 percent sample). PUMS data include sampling weights order extrapolated larger population, replication weights order calculate margins error. PUMS used drill small subsets population, particular attention paid margins error drawing conclusions data; see section . Census Bureau resource ACS Public Use Microdata Sample File Users Need Know helpful resource questions PUMS .","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"retrieve-pums-data-get_psrc_pums","dir":"Articles","previous_headings":"","what":"Retrieve PUMS data: get_psrc_pums()","title":"PUMS 1: Calculate basic summaries","text":"PSRC census package makes easy calculate standard summary statistics county region whole. Data analysis psrccensus package involves two steps: first step consists retrieving data interest via get_psrc_pums() function. arguments : span - either 1 ,3 5, denoting span desired ACS survey (1yr 2000-present; 3yr 2007-13; 5yr 2009-present) dyear - aka data year (concluding year 3- 5-yr ACS) level - unit analysis; “p” equivalent “persons”, “h” equivalent “households” vars - one PUMS variables UPPERCASE (multiple, character vector) result get_psrc_pums() structured data object (per srvyr package) sampling replication weights built . get_psrc_pums() must called separately combination span - dyear - level intend use. example, want calculate household statistics population statistics survey (span year), still need use get_psrc_pums() households (level=“h”) second time persons (‘level’=“p”). necessary PUMS, households persons perfectly coextensive: household-level datasets contain persons living group quarters person-level datasets filtered households. (Household datasets filtered remove vacant units.) invoke get_psrc_pums() suggest assign name helps differentiate whatever span - dyear - level combinations relevant analysis. Although PUMS variables measured specific either persons households, either unit analysis can associated variables–persons inherit respective household attributes (albeit missing case group quarters), households , per Census Bureau convention, assigned person attributes adult respondent (aka “householder; also true published American Community Survey estimates). Variables must typed exactly, recommended consult PUMS data directory, especially since variables may differ data years. PUMS data dictionary 2017- forward captured R object tidycensus::pums_variables (filter year survey). Census Bureau also publishes separate data dictionary online html, pdf txt, can easily searched via web browser.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"built-in-psrc-variables","dir":"Articles","previous_headings":"Retrieve PUMS data: get_psrc_pums()","what":"Built-in PSRC variables","title":"PUMS 1: Calculate basic summaries","text":"addition variables listed Census PUMS data dictionary, can also select following custom PSRC variables: PRACE - person-level race/ethnicity Hispanic/Latino race category (non-overlapping races) HRACE - household-level race/ethnicity considering members; ‘Multiple Races’ category well Hispanic/Latino NWRK - number workers household (composition persons) BINCOME - household income (HINCP) grouped standard PSRC breakpoints BIN_AGE - age (AGEP) grouped standard PSRC breakpoints BIN_POVRATIO - ratio household income poverty level (POVPIP) w/ PSRC breakpoints (fraction, percent) BIN_YBL - year structure built, current ACS breakpoints (simplified YBL) OWN_RENT - dichotomous tenure (simplified TEN) ED_ATTAIN - educational attainment (simplified SCHL) MI_JOBSECTOR - PSRC-defined Manufacturing-Industrial groups (NAICSP) LUM_JOBSECTOR - PSRC-defined land use modeling employment sector (NAICSP) SOCP3 - Standard Occupational Code (SOC) minor group (SOCP) SOCP5 - Standard Occupational Code (SOC) broad occupation (SOCP) codes change (past), may necessary confirm custom variable definitions match new data dictionary. DATA_YEAR, PRODUCT, UNIT, COUNTY variables always included table without specify ; first three can used identify dataset. also possible define variables, described accompanying article.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"built-in-intra-survey-inflation-adjustment","dir":"Articles","previous_headings":"Retrieve PUMS data: get_psrc_pums()","what":"Built-in intra-survey inflation adjustment","title":"PUMS 1: Calculate basic summaries","text":"ACS (PUMS records developed) rolling survey, responses collected different times throughout year value money may changed slightly time. Published ACS estimates ‘baked-’ inflation adjustment (derived Federal Consumer Price Index, CPI) account . Dollar amounts PUMS dataset, however, provided raw–reported–along average inflation adjustment factor. Intra-survey inflation adjustment particularly important multi-year (3- 5-yr) datasets. psrccensus applies correct adjustment . PUMS estimates match ACS counterparts precisely, adjustment brings closer. separate adjustment still necessary intend compare separate surveys.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"generate-summary-statistics","dir":"Articles","previous_headings":"","what":"Generate summary statistics","title":"PUMS 1: Calculate basic summaries","text":"second step analysis involves calculating summary statistics result prior step. PUMS sampled, summary statistics must use sampling weight order expanded full population. Although PUMS data exists entire country, results psrccensus filtered 4-county PSRC region simplicity. four relevant statistical functions, along summary function gives four table.          psrc_pums_count() (also includes shares, .e. proportions group)          psrc_pums_sum()          psrc_pums_median()          psrc_pums_mean()          psrc_pums_summary() arguments summary function identical: - srvyr data object returned get_psrc_pums() stat_var - numeric variable summarized. group_vars - Optional grouping variable/s (multiple, character vector) Argument names can omitted (saving keystrokes) arguments provided proper sequence; may prefer explicit avoid confusing . result tables make use srvyr::cascade feature provide totals grouping level; “peeled ” last-grouped first. multiple grouping variables, order specify control shares psrc_pums_count() nested, example. result COUNTY one grouping variables, shifted left-position table. psrccensus constrain choice variables, clearly variable summarized must number, grouping variables continuous. stat_var argument ignored count function (primary variable implicit), allowed since scripting use identical arguments (e.g. map/apply functions). Since PUMS records sampled rather comprising full census, psrccensus applies sampling weights deliver estimates full population. also provides tabulated margin error (MOE) estimate separately labeled ’_moe’ column.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"examples","dir":"Articles","previous_headings":"Generate summary statistics","what":"Examples","title":"PUMS 1: Calculate basic summaries","text":"example, calculate 2019 median household income region use following function calls: calculate subgroup category (, housing tenure–e.g. vs. rent), use optional grouping variable argument. count function tabulates number people households grouping category, depending level specified get_psrc_pums(). result represents population (via weighting), survey sample. intend count things people households, number bedrooms, use ‘total’ function instead, sums target variable. summary function provides four statistics margins error table. Notice statistical functions leave data object unchanged, desired can used repeatedly, various grouping variable combinations (long share unit analysis–.e. persons households). described accompanying article, recommended workflow maintains data object whole (rather discarding observations specific one analysis another).","code":"x <- get_psrc_pums(span = 5,                     # Denoting ACS 5-year estimates; 1-year also available                    dyear = 2019,                 # Last data year of span                    level = \"h\",                  # Unit of analysis == household (\"p\" used for person)                    vars = c(\"HINCP\",\"TEN\"))      # PUMS household income & housing tenure variables; using tenure later.                                                   #  - You can choose as many variables as you need. psrc_pums_median(x, stat_var = \"HINCP\")          # Median Household income (without regard to tenure) psrc_pums_median(x,                              # the assigned result of get_psrc_pums()                  stat_var = \"HINCP\",             # Summarizing household income . . .                  group_vars = \"TEN\",             # . . . grouped by housing tenure                  rr=TRUE)                        # w/ optional relative reliability measure psrc_pums_count(x, group_vars=c(\"COUNTY\",\"TEN\"))      # If omitting stat_var argument, group_var must be labeled psrc_pums_summary(x, \"HINCP\", \"TEN\") %>% print()"},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"sample-sizes-confidence-and-error-margins","dir":"Articles","previous_headings":"","what":"Sample sizes, confidence, and error margins","title":"PUMS 1: Calculate basic summaries","text":"Although psrccensus allows specify multiple grouping variables, ’ll need keep mind limits can usefully determined small subsets respondents within PUMS. draw responsible conclusions PUMS data, ’ll need examine margins error (MOE) psrccensus calculates along estimate. (PUMS via psrccensus really shines, since can laborious calculate MOE without dedicated statistical software.) Margins error PUMS given units estimate (ACS), easy get bounds 90 percent confidence interval adding MOE estimate subtracting MOE . respondents category combination, margin error may beyond calculation (NaN, ‘number’), large estimate little practical value. cases, may want consider either switching 1-year 5-year span (latter larger sample), potentially analyze dimensions data separately rather combination, potentially change categories using (e.g. use dplyr::mutate create less disaggregate variable).","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-1-basics.html","id":"determining-difference","dir":"Articles","previous_headings":"Sample sizes, confidence, and error margins","what":"Determining difference","title":"PUMS 1: Calculate basic summaries","text":"actual difference two statistics generated PUMS data? know, ’ll need examine margins error. rule thumb, overlap 90 percent confidence intervals two estimates, conclude values different. perform careful test, can calculate Z score: \\[\\frac{|Est_{1} - Est_{2}|}{\\sqrt{MOE_{est1}^2 + MOE_{est2}^2}}\\] meaningful difference two estimates Z score greater 1. test can applied different years, PUMS ACS. However, please remember Census warns drawing comparisons estimates generated different spans (e.g. 1yr 5yr), especially overlap (observations may exist ). z_score() convenience function performs calculation:","code":"rs <- psrc_pums_median(x, \"HINCP\", \"TEN\") c1 <- rs[1,(ncol(rs)-1):ncol(rs)]                # First-line estimate and its MOE (as numeric vector) c2 <- rs[3,(ncol(rs)-1):ncol(rs)]                # Third-line estimate and its MOE (as numeric vector) z_score(c1, c2)                                  # A true difference indicated by score > 1"},{"path":"https://psrc.github.io/psrccensus/articles/pums-2-make-vars.html","id":"defining-your-own-variables-in-pums","dir":"Articles","previous_headings":"","what":"Defining your own variables in PUMS","title":"PUMS 2: Make your own variables","text":"aren’t variables included PUMS dataset enough? Many PUMS categories offer detail useful analysis, need simplified reflect purpose (increase sample sizes per category). cases may require defining new variable conditioned multiple original variables. finally, times analysis may apply part population. srvyr object delivered get_psrc_pums() can altered dplyr commands maintaining associated weights structure (see vignette). recommend using mutate() command, combination case_when() ifelse() define variable directly captures needs analysis, psrccensus can deliver intended statistics–especially, associated margin error–rather attempting re-aggregate summary results.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-2-make-vars.html","id":"hints-and-things-to-watch-out-for-when-recoding-pums-variables","dir":"Articles","previous_headings":"Defining your own variables in PUMS","what":"Hints and things to watch out for when recoding PUMS variables:","title":"PUMS 2: Make your own variables","text":"Categorical (.e. grouping) variables srvyr Factor datatype, new categorical variables also Factor datatype. means new altered variable create use either factor() command quicker alternate, .factor(). sort new variable categories particular order, specify factor(levels=); default alphabetical (option using .factor() command). assign NA use constant right hand side, NA_character_, NA_integer_, NA_real_, depending datatype want. R assigns type based first expression, without context interprets normal NA logical value. catch-(aka “else”) category, consider using !.na() criterion rather TRUE. Grouping NA categories may obscure non-applicable cases. logical conditions using value labels, grepl() function can handy, regular expressions can match one many labels without typing entire label (although ’ll want craft regex pattern carefully, matches labels intend ). complex recoding may find convenient call get_psrc_pums() labels=FALSE option, underlying value codes shorter easily handled rules descriptive labels (use data dictionary interpret value codes). aware leaves columns values. defining variable using PUMS values, aware trap: R stores Factors hidden value maps set character “levels”, displayed. string comparisons Factor use displayed “level”, numerical comparisons Factor use hidden value, even “level” looks like integer (PUMS values ). way handle convert Factor character first mutate() statement, .e. .integer(.character(SOME_PUMS_VAR)), part logical expression.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-2-make-vars.html","id":"handle-subsets-via-a-universal-variable-the-incl_nafalse-option","dir":"Articles","previous_headings":"Defining your own variables in PUMS","what":"Handle subsets via a universal variable & the incl_na=FALSE option","title":"PUMS 2: Make your own variables","text":"Rather removing observations dplyr::filter() command, recommend assign cases NA custom categorical variable–way, can use full survey object repeated analyses without needing manage different filtered subsets. exclude NA category results table–particularly useful reporting subset shares via psrc_pums_count() function–specify incl_na=FALSE option statistical functions. effectively filters survey prior running statistic, without affecting data object . default incl_na=TRUE option includes NA groups gives accurate shares full population (households, unit analysis).","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-2-make-vars.html","id":"examples","dir":"Articles","previous_headings":"Defining your own variables in PUMS","what":"Examples","title":"PUMS 2: Make your own variables","text":"Adding two custom variables one mutate command: Using labels=FALSE .character() complex recode: Notice conversion first character, integer allow numeric comparisons. approach particular advantage label matching using value ranges variables use values (including ESR; grepl() used works labels)","code":"library(psrccensus) library(magrittr) library(dplyr)  pums19_5p <- get_psrc_pums(5, 2019, \"p\", c(\"AGEP\",\"SCHL\",\"ESR\"))                           # Pull the data;                                                                                             #    rather than pipe the result, use a separate assignment pums19_5p %<>% mutate(                                                                     #    so any issues with mutate() don't negate your download   ed_25up = factor(                                                                        # Use Factor datatype for categorical variables       case_when(AGEP<25                               ~ NA_character_,                     # Type-specific NA constant                 grepl(\"^(Bach|Mast|Prof|Doct)\", SCHL) ~ \"Bachelor's degree or higher\",     # Regex is concise; handy since PUMS labels can be wordy                  !is.na(SCHL)                          ~ \"Less than a Bachelor's degree\")), # !is.na() criteria   emp_25up = factor(                                                                       # Mutate() can assign more than one variable       case_when(AGEP<25                               ~ NA_character_,                     # Type-specific NA constant                 grepl(\"at work$\", ESR)                ~ \"Employed\",                        # Concise regex again; use care, checking the data dictionary                 !is.na(ESR)                           ~ as.character(ESR)),                # Retain NA for children under 16       levels=c(\"Employed\",\"Unemployed\",\"Not in labor force\")))                             # Preferred ordering via `levels=`    emp_ed_all  <- psrc_pums_count(pums19_5p, group_vars=c(\"emp_25up\", \"ed_25up\"))             # These shares reflect the entire population emp_ed_25up <- psrc_pums_count(pums19_5p, group_vars=c(\"emp_25up\", \"ed_25up\"), incl_na=FALSE) # No NA; same counts but shares for only age 25+, as intended pvars <- c(\"AGEP\",\"FOD1P\",\"FOD2P\",\"INDP\",\"ESR\") ftr_int <- function(x){as.integer(as.character(x))}                                        # Micro-helper conversion function pums18_5p <- get_psrc_pums(5, 2018, \"p\", pvars, labels=FALSE)                              # Labels=FALSE leaves values--but they are still Factors!  pums18_5p %<>% mutate(    med_deg = factor(        case_when(between(ftr_int(FOD1P), 6100, 6199)|between(ftr_int(FOD2P), 6100, 6199) ~ \"Medical Degree\",                  TRUE ~ \"No medical degree\")),                                             # Regardless of age    med_field = factor(        case_when(ftr_int(ESR) %in% c(1,2,4,5) & between(ftr_int(INDP), 7970, 8290) ~ \"Medical industry, employed\",                  ftr_int(ESR)==3 & between(ftr_int(INDP), 7970, 8290) ~ \"Medical industry, not currently employed\",                  ftr_int(ESR) %in% c(1,2,4,5) & !is.na(INDP)          ~ \"Non-medical industry, employed\",                  ftr_int(ESR)==3 & !is.na(INDP)                       ~ \"Non-medical industry, not currently employed\",                  TRUE ~ NA_character_)))                                                   # Leaving out those not in the workforce    med_deg_work_all  <- psrc_pums_count(pums18_5p, group_vars=c(\"med_field\",\"med_deg\"))       # These shares reflect the entire population med_deg_work_only <- psrc_pums_count(pums18_5p, group_vars=c(\"med_field\",\"med_deg\"), incl_na=FALSE) # These shares limited to workforce"},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"time-the-next-dimension","dir":"Articles","previous_headings":"","what":"Time: the next dimension","title":"PUMS 3: Script multiyear functions","text":"Now ’ve learned calculate single-survey results PUMS microdata, ’s stop calculating trends across multiple surveys? turns , potholes road avoid.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"hint-1---be-mindful-of-span","dir":"Articles","previous_headings":"Time: the next dimension","what":"Hint #1 - Be mindful of span","title":"PUMS 3: Script multiyear functions","text":"item relates confidence levels: Census Bureau strongly advises drawing comparisons surveys overlapping spans (e.g. 2015-19 & 2016-20 5yr data), since identical observations present surveys, means may underestimate change overestimate certainty. 5-year data best 5-year intervals answer need; get annual trends, ’ll need use 1yr data (involves uncertainty). Remember use Z-scores determine whether trend values can considered statistically distinct.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"hint-2---compare-data-dictionaries","dir":"Articles","previous_headings":"Time: the next dimension","what":"Hint #2 - Compare data dictionaries","title":"PUMS 3: Script multiyear functions","text":"Although may seem consistent first blush, many PUMS variable codes, values, labels changed course program. plan compare data across multiple surveys, ’ll either want confirm variables interest remained consistent, write code handle differences among . cases, way data reported–way question asked–might preclude accurate multi-year comparisons desired level detail.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"hint-3---use-real-dollar-variables","dir":"Articles","previous_headings":"Time: the next dimension","what":"Hint #3 - Use real dollar variables","title":"PUMS 3: Script multiyear functions","text":"Due inflation, value dollar declines time; achieve true multi-year comparison price income variables, must adjusted real terms–.e., adjusted reflect common reference year dollar value. involves multiplying ratio (known ‘deflator’) relevant annual values price index, generally Personal Consumption Expenditures (PCE) Index, updated remain valid across years. Prior running statistical functions, use psrccensus function real_dollars() survey data object create real versions monetary variables. leaves original variables intact; real versions suffixed reference year specify (.e., converting HINCP 2015 survey 2020 values, new variable HINCP2020). Note need St. Louis Federal Reserve (FRED) API key.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"hint-4---minimize-downloads","dir":"Articles","previous_headings":"Time: the next dimension","what":"Hint #4 - Minimize downloads","title":"PUMS 3: Script multiyear functions","text":"writing multi-year functions, keep mind get_psrc_pums() downloads combines possible variables returning requested, ’s efficient group operations survey (year/span) rather call get_psrc_pums() separately desired measure. recommend combining data retrieval, manipulation summarization operations single year function, can apply across multiple surveys. approach requires many downloads surveys–resulting faster operations lower demand memory.","code":""},{"path":"https://psrc.github.io/psrccensus/articles/pums-3-multiyear.html","id":"example","dir":"Articles","previous_headings":"Time: the next dimension","what":"Example","title":"PUMS 3: Script multiyear functions","text":"","code":"library(psrccensus) library(magrittr) library(dplyr) library(srvyr) library(data.table)  # Build a single year function first # -- it can include as many individual stat analyses as needed (see list items at end) # -- notice `real_dollars()` creates the variable HINCP2020 later used for median statistic  pums_singleyear <- function(dyear, span=1){   hh_df <- get_psrc_pums(span, dyear, \"h\", c(\"HINCP\",\"AGEP\",\"HRACE\",\"LNGI\",\"SCHL\"))   hh_df %<>% real_dollars(2020) %>% mutate(     ed_attain = factor(case_when(grepl(\"(Bach|Mast|Prof|Doct)\", SCHL)  ~ \"Bachelor's degree or higher\",                                  !is.na(SCHL)                          ~ \"Less than a Bachelor's degree\")),     lmtd_engl = factor(case_when(grepl(\"^No one\", LNGI) ~ \"Limited English proficiency\",                                  !is.na(LNGI)           ~ \"English proficient\")))   dvars <- c(\"HRACE\",\"lmtd_engl\",\"ed_attain\") %>% as.list()   singleyr_rs <- list()   singleyr_rs[[1]] <- pums_bulk_stat(hh_df, \"count\", group_var_list=dvars, incl_na=FALSE)   singleyr_rs[[2]] <- pums_bulk_stat(hh_df, \"median\", \"HINCP2020\", dvars, incl_na=FALSE) # singleyr_rs[[3]] <- ...   return(singleyr_rs) }  # Multiyear function runs the single-year function across years and combines results pums_multiyear <- function(dyears){   multiyear_rs <- lapply(dyears, pums_singleyear) %>% lapply(as.vector) %>%      do.call(rbind, .) %>% as.data.frame() %>% setDT() %>% lapply(rbindlist)   return(multiyear_rs) }  x <- pums_multiyear(2015:2019)"},{"path":"https://psrc.github.io/psrccensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Craig Helmann. Author. Christy Lam. Author. Polina Butrina. Author. Suzanne Childress. Maintainer. Michael Jensen. Author.","code":""},{"path":"https://psrc.github.io/psrccensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Helmann C, Lam C, Butrina P, Jensen M (2024). psrccensus: Summarize Census Data use PSRC. R package version 0.1.0, https://psrc.github.io/psrccensus/.","code":"@Manual{,   title = {psrccensus: Summarize Census Data for use at PSRC},   author = {Craig Helmann and Christy Lam and Polina Butrina and Michael Jensen},   year = {2024},   note = {R package version 0.1.0},   url = {https://psrc.github.io/psrccensus/}, }"},{"path":"https://psrc.github.io/psrccensus/index.html","id":"psrccensus","dir":"","previous_headings":"","what":"Summarize Census Data for use at PSRC","title":"Summarize Census Data for use at PSRC","text":"set tools developed PSRC staff pull, process, visualize Census Data geographies Central Puget Sound Region. Install following command: devtools::install_github(\"psrc/psrccensus\") problems installing package, make sure latest dependency packages. may prompted install dependency packages ; can install selecting option 1, “Install ”.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/acs_tbltypes_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"steps for internal acs table lookup — acs_tbltypes_lookup","title":"steps for internal acs table lookup — acs_tbltypes_lookup","text":"steps internal acs table lookup","code":""},{"path":"https://psrc.github.io/psrccensus/reference/acs_varsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Search published ACS variables — acs_varsearch","title":"Search published ACS variables — acs_varsearch","text":"Identify desired tables examining prefix relevant variable codes Includes primary, subject profile tables","code":""},{"path":"https://psrc.github.io/psrccensus/reference/acs_varsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search published ACS variables — acs_varsearch","text":"","code":"acs_varsearch(regex, year = NULL)"},{"path":"https://psrc.github.io/psrccensus/reference/acs_varsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search published ACS variables — acs_varsearch","text":"regex search term year optionally restrict search specific year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/acs_varsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search published ACS variables — acs_varsearch","text":"data.table filtered variable codes attributes","code":""},{"path":"https://psrc.github.io/psrccensus/reference/acs_varsearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search published ACS variables — acs_varsearch","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_acs_share.html","id":null,"dir":"Reference","previous_headings":"","what":"Add shares to Psrccensus ACS object — add_acs_share","title":"Add shares to Psrccensus ACS object — add_acs_share","text":"Add shares Psrccensus ACS object","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_acs_share.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add shares to Psrccensus ACS object — add_acs_share","text":"","code":"add_acs_share(df)"},{"path":"https://psrc.github.io/psrccensus/reference/add_acs_share.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add shares to Psrccensus ACS object — add_acs_share","text":"df dataframe Census ACS result","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_acs_share.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add shares to Psrccensus ACS object — add_acs_share","text":"dataframe additional share share_moe fields","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_acs_share.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add shares to Psrccensus ACS object — add_acs_share","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Add County Name to PUMS API Result — add_county","title":"Add County Name to PUMS API Result — add_county","text":"Helper get_psrc_pums function. Attaches county name.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add County Name to PUMS API Result — add_county","text":"","code":"add_county(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/add_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add County Name to PUMS API Result — add_county","text":"dt PSRC data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add County Name to PUMS API Result — add_county","text":"PSRC data.table county names","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_county.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add County Name to PUMS API Result — add_county","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_decennial_share.html","id":null,"dir":"Reference","previous_headings":"","what":"Add shares to Psrccensus ACS object — add_decennial_share","title":"Add shares to Psrccensus ACS object — add_decennial_share","text":"Add shares Psrccensus ACS object","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_decennial_share.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add shares to Psrccensus ACS object — add_decennial_share","text":"","code":"add_decennial_share(df)"},{"path":"https://psrc.github.io/psrccensus/reference/add_decennial_share.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add shares to Psrccensus ACS object — add_decennial_share","text":"df dataframe Psrccensus Decennial result","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_decennial_share.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add shares to Psrccensus ACS object — add_decennial_share","text":"dataframe additional share share_moe fields","code":""},{"path":"https://psrc.github.io/psrccensus/reference/add_decennial_share.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add shares to Psrccensus ACS object — add_decennial_share","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/adjust_dollars.html","id":null,"dir":"Reference","previous_headings":"","what":"Dollar variable adjustment for PUMS — adjust_dollars","title":"Dollar variable adjustment for PUMS — adjust_dollars","text":"Helper get_psrc_pums function. Applies Census Bureau-specified inflation adjustment dollar values. See vignette brief discussion. Option bypass inflation adjustment exists, order match estimates generated without .","code":""},{"path":"https://psrc.github.io/psrccensus/reference/adjust_dollars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dollar variable adjustment for PUMS — adjust_dollars","text":"","code":"adjust_dollars(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/adjust_dollars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dollar variable adjustment for PUMS — adjust_dollars","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/adjust_dollars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dollar variable adjustment for PUMS — adjust_dollars","text":"full input data.table dollar values adjusted","code":""},{"path":"https://psrc.github.io/psrccensus/reference/adjust_dollars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dollar variable adjustment for PUMS — adjust_dollars","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/census_to_psrcgeo.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate psrccensus data to planning geographies — census_to_psrcgeo","title":"Translate psrccensus data to planning geographies — census_to_psrcgeo","text":"Translate psrccensus data planning geographies Translate psrccensus data Regional Geography Classes Translate psrccensus data Regional Growth Centers Translate psrccensus data Regional Manufacturing-Industrial Centers Translate psrccensus data Traffic Analysis Zones Translate psrccensus data HCT Station Areas (VISION 2050)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/census_to_psrcgeo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate psrccensus data to planning geographies — census_to_psrcgeo","text":"","code":"census_to_rgs(df, wgt = \"total_pop\")  census_to_rgc(df, wgt = \"total_pop\")  census_to_mic(df, wgt = \"total_pop\")  census_to_taz(df, wgt = \"total_pop\")  census_to_hct(df, wgt = \"total_pop\")"},{"path":"https://psrc.github.io/psrccensus/reference/census_to_psrcgeo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate psrccensus data to planning geographies — census_to_psrcgeo","text":"df acs decennial dataset returned psrccensus wgt either \"total_pop\" (default), \"household_pop\", \"group_quarters_pop\", \"housing_units\" \"occupied_housing_units\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/census_to_psrcgeo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate psrccensus data to planning geographies — census_to_psrcgeo","text":"Equivalent table planning geography units instead census geography units, translated value margin error","code":""},{"path":"https://psrc.github.io/psrccensus/reference/census_to_psrcgeo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Translate psrccensus data to planning geographies — census_to_psrcgeo","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/codes2labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap variable codes for labels — codes2labels","title":"Swap variable codes for labels — codes2labels","text":"Helper get_psrc_pums function. Delivers labels instead values, labels exist","code":""},{"path":"https://psrc.github.io/psrccensus/reference/codes2labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap variable codes for labels — codes2labels","text":"","code":"codes2labels(dt, dyear, vars)"},{"path":"https://psrc.github.io/psrccensus/reference/codes2labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap variable codes for labels — codes2labels","text":"dt PSRC data.table dyear data year vars PUMS variable/s UPPERCASE string element list","code":""},{"path":"https://psrc.github.io/psrccensus/reference/codes2labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap variable codes for labels — codes2labels","text":"PSRC data.table labels","code":""},{"path":"https://psrc.github.io/psrccensus/reference/codes2labels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Swap variable codes for labels — codes2labels","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Dicennial Census variables — dicennial_varsearch","title":"Search Dicennial Census variables — dicennial_varsearch","text":"Includes primary, subject profile tables","code":""},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Dicennial Census variables — dicennial_varsearch","text":"","code":"dicennial_varsearch(regex, year = NULL)"},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Dicennial Census variables — dicennial_varsearch","text":"regex search term year optionally restrict search specific year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Dicennial Census variables — dicennial_varsearch","text":"data.table filtered variable codes attributes","code":""},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search Dicennial Census variables — dicennial_varsearch","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/dicennial_varsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Dicennial Census variables — dicennial_varsearch","text":"","code":"# Nursing home or medical group quarters z <- dicennial_varsearch(\"^Total!!Institutionalized .*(nursing|hospital|hospice)\")  # All variables from table POO1 z <- dicennial_varsearch(\"^P001\")"},{"path":"https://psrc.github.io/psrccensus/reference/ensure_datatypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm correct datatypes for group variables and weights — ensure_datatypes","title":"Confirm correct datatypes for group variables and weights — ensure_datatypes","text":"Helper get_psrc_pums function. Makes certain weights numeric grouping variables factors","code":""},{"path":"https://psrc.github.io/psrccensus/reference/ensure_datatypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm correct datatypes for group variables and weights — ensure_datatypes","text":"","code":"ensure_datatypes(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/ensure_datatypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm correct datatypes for group variables and weights — ensure_datatypes","text":"dt PSRC data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/ensure_datatypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm correct datatypes for group variables and weights — ensure_datatypes","text":"PSRC data.table types confirmed","code":""},{"path":"https://psrc.github.io/psrccensus/reference/ensure_datatypes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confirm correct datatypes for group variables and weights — ensure_datatypes","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_ftp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch FTP — fetch_ftp","title":"Fetch FTP — fetch_ftp","text":"Helper pums_ftp_gofer function used person household table prep join","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_ftp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch FTP — fetch_ftp","text":"","code":"fetch_ftp(span, dyear, level)"},{"path":"https://psrc.github.io/psrccensus/reference/fetch_ftp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch FTP — fetch_ftp","text":"span Either 1 acs1 5 acs5 dyear data year level Either \"p\" \"h\", \"persons\" \"households\" respectively","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_ftp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch FTP — fetch_ftp","text":"data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_ftp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch FTP — fetch_ftp","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch ZIP — fetch_zip","title":"Fetch ZIP — fetch_zip","text":"Helper pums_ftp_gofer function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch ZIP — fetch_zip","text":"","code":"fetch_zip(zip_filepath, target_file, dyear)"},{"path":"https://psrc.github.io/psrccensus/reference/fetch_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch ZIP — fetch_zip","text":"zip_filepath ftp URL location target_file .zip archive file read dyear data year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch ZIP — fetch_zip","text":"unzipped table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/fetch_zip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch ZIP — fetch_zip","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/filter2region.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter PUMS to Region — filter2region","title":"Filter PUMS to Region — filter2region","text":"Helper read_pums function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/filter2region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter PUMS to Region — filter2region","text":"","code":"filter2region(dt, dyear)"},{"path":"https://psrc.github.io/psrccensus/reference/filter2region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter PUMS to Region — filter2region","text":"dt data.table dyear data year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/filter2region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter PUMS to Region — filter2region","text":"filtered data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/filter2region.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter PUMS to Region — filter2region","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Estimates — format_estimates","title":"Format Estimates — format_estimates","text":"Format estimates county summary table option include shares share margins error.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Estimates — format_estimates","text":"","code":"format_estimates(table, type = \"total\", moe = TRUE)"},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Estimates — format_estimates","text":"table data frame/tibble `get_acs_recs()` single table time period. type character, select either 'total' 'share'. moe logical value, TRUE FALSE include exclude margins error.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Estimates — format_estimates","text":"data frame ACS estimates PSRC counties region either total estimates proportions, without margins error.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format Estimates — format_estimates","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/format_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Estimates — format_estimates","text":"","code":"df <-get_acs_recs(geography = 'county',                                table.names = c('B03002'),                                years = c(2019),                                acs.type = 'acs1') #> Getting data from the 2019 1-year ACS #> The 1-year ACS provides data for geographies with populations of 65,000 and greater. #> Loading ACS1 variables for 2019 from table B03002. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset. #> Using FIPS code '53' for state 'Washington' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County'  format_estimates(df) #> # A tibble: 21 × 30 #>    variable   label       concept acs_type  year  King_cv King_estimate King_moe #>    <chr>      <chr>       <chr>   <chr>    <dbl>    <dbl>         <dbl>    <dbl> #>  1 B03002_001 Estimate!!… HISPAN… acs1      2019 NA             2252782        0 #>  2 B03002_002 Estimate!!… HISPAN… acs1      2019 NA             2030140        0 #>  3 B03002_003 Estimate!!… HISPAN… acs1      2019  0.00150       1302544     3208 #>  4 B03002_004 Estimate!!… HISPAN… acs1      2019  0.0192         147822     4678 #>  5 B03002_005 Estimate!!… HISPAN… acs1      2019  0.0908          13321     1990 #>  6 B03002_006 Estimate!!… HISPAN… acs1      2019  0.0101         424590     7085 #>  7 B03002_007 Estimate!!… HISPAN… acs1      2019  0.0709          15702     1831 #>  8 B03002_008 Estimate!!… HISPAN… acs1      2019  0.303            6574     3281 #>  9 B03002_009 Estimate!!… HISPAN… acs1      2019  0.0448         119587     8804 #> 10 B03002_010 Estimate!!… HISPAN… acs1      2019  0.402            2639     1744 #> # ℹ 11 more rows #> # ℹ 22 more variables: King_reliability <chr>, King_se <dbl>, Kitsap_cv <dbl>, #> #   Kitsap_estimate <dbl>, Kitsap_moe <dbl>, Kitsap_reliability <chr>, #> #   Kitsap_se <dbl>, Pierce_cv <dbl>, Pierce_estimate <dbl>, Pierce_moe <dbl>, #> #   Pierce_reliability <chr>, Pierce_se <dbl>, Snohomish_cv <dbl>, #> #   Snohomish_estimate <dbl>, Snohomish_moe <dbl>, Snohomish_reliability <chr>, #> #   Snohomish_se <dbl>, Region_cv <dbl>, Region_estimate <dbl>, … format_estimates(df, type = 'share', moe = FALSE) #> # A tibble: 21 × 25 #>    variable   label     concept acs_type  year  King_cv King_reliability King_se #>    <chr>      <chr>     <chr>   <chr>    <dbl>    <dbl> <chr>              <dbl> #>  1 B03002_001 Estimate… HISPAN… acs1      2019 NA       missing or N/A       NA  #>  2 B03002_002 Estimate… HISPAN… acs1      2019 NA       missing or N/A       NA  #>  3 B03002_003 Estimate… HISPAN… acs1      2019  0.00150 good               1950. #>  4 B03002_004 Estimate… HISPAN… acs1      2019  0.0192  good               2844. #>  5 B03002_005 Estimate… HISPAN… acs1      2019  0.0908  good               1210. #>  6 B03002_006 Estimate… HISPAN… acs1      2019  0.0101  good               4307. #>  7 B03002_007 Estimate… HISPAN… acs1      2019  0.0709  good               1113. #>  8 B03002_008 Estimate… HISPAN… acs1      2019  0.303   use with caution   1995. #>  9 B03002_009 Estimate… HISPAN… acs1      2019  0.0448  good               5352. #> 10 B03002_010 Estimate… HISPAN… acs1      2019  0.402   use with caution   1060. #> # ℹ 11 more rows #> # ℹ 17 more variables: King_share <dbl>, Kitsap_cv <dbl>, #> #   Kitsap_reliability <chr>, Kitsap_se <dbl>, Kitsap_share <dbl>, #> #   Pierce_cv <dbl>, Pierce_reliability <chr>, Pierce_se <dbl>, #> #   Pierce_share <dbl>, Snohomish_cv <dbl>, Snohomish_reliability <chr>, #> #   Snohomish_se <dbl>, Snohomish_share <dbl>, Region_cv <dbl>, #> #   Region_reliability <chr>, Region_se <dbl>, Region_share <dbl>"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_blockgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by Census Block Group — get_acs_blockgroup","title":"ACS Estimates by Census Block Group — get_acs_blockgroup","text":"Generate ACS 5yr estimates multiple tables Census Block Groups multiple counties","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_blockgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by Census Block Group — get_acs_blockgroup","text":"","code":"get_acs_blockgroup(   state = \"Washington\",   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   table.names,   years )"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_blockgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by Census Block Group — get_acs_blockgroup","text":"state character string state name abbreviation. Defaults Washington. counties character string vector counties. Defaults PSRC counties. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_blockgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by Census Block Group — get_acs_blockgroup","text":"tibble acs estimates tracts selected table codes. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_blockgroup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by Census Block Group — get_acs_blockgroup","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_county.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by County — get_acs_county","title":"ACS Estimates by County — get_acs_county","text":"Generate ACS estimates multiple tables multiple counties helper function main function get_acs_recs.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by County — get_acs_county","text":"","code":"get_acs_county(   state = \"Washington\",   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   table.names,   years,   acs.type )"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by County — get_acs_county","text":"state character string state name abbreviation. Defaults Washington. counties character string vector counties. Defaults PSRC counties. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year. acs.type character string either 'acs1', 'acs3' acs5'.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by County — get_acs_county","text":"tibble acs estimates counties selected table codes years regional aggregation. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_county.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by County — get_acs_county","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_msa.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by MSA — get_acs_msa","title":"ACS Estimates by MSA — get_acs_msa","text":"Generate ACS estimates multiple tables multiple MSA's","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_msa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by MSA — get_acs_msa","text":"","code":"get_acs_msa(table.names, years, acs.type, FIPS = c(\"14740\", \"42660\"))"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_msa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by MSA — get_acs_msa","text":"table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year. acs.type character string either 'acs1', 'acs3' acs5'. FIPS Character string FIPS codes specific MSA geographies. Defaults Seattle & Bremerton MSA c(\"14740\",\"42660\")","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_msa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by MSA — get_acs_msa","text":"tibble acs estimates MSA selected table codes years. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_msa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by MSA — get_acs_msa","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_place.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by Place — get_acs_place","title":"ACS Estimates by Place — get_acs_place","text":"Generate ACS estimates multiple tables multiple places","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by Place — get_acs_place","text":"","code":"get_acs_place(   state = \"Washington\",   table.names,   years,   acs.type,   place_FIPS = NULL )"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by Place — get_acs_place","text":"state character string state name abbreviation. Defaults Washington. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year. acs.type character string either 'acs1', 'acs3' acs5'. place_FIPS Character string FIPS codes (state prefix) specific Census Places. NULL, Places within PSRC Region returned.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by Place — get_acs_place","text":"tibble acs estimates Place selected table codes years. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_place.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by Place — get_acs_place","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_puma.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by Census PUMA — get_acs_puma","title":"ACS Estimates by Census PUMA — get_acs_puma","text":"Generate ACS 5 year estimates multiple tables Census PUMA","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_puma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by Census PUMA — get_acs_puma","text":"","code":"get_acs_puma(state = \"Washington\", table.names, years)"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_puma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by Census PUMA — get_acs_puma","text":"state character string state name abbreviation. Defaults Washington. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_puma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by Census PUMA — get_acs_puma","text":"tibble acs estimates PUMA selected table codes. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_puma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by Census PUMA — get_acs_puma","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates — get_acs_recs","title":"ACS Estimates — get_acs_recs","text":"Generate ACS estimates multiple tables tracts, counties, MSAs, places multiple years.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates — get_acs_recs","text":"","code":"get_acs_recs(   geography,   state = \"Washington\",   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   table.names,   years,   FIPS = c(\"14740\", \"42660\"),   place_FIPS = NULL,   acs.type )"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates — get_acs_recs","text":"geography character string either 'tract', 'county', 'msa', 'place'. state character string state name abbreviation. Defaults Washington. counties character string vector counties. Defaults PSRC counties. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year. FIPS Character string FIPS codes specific MSA geographies. Defaults Seattle & Bremerton MSA c(\"14740\",\"42660\") place_FIPS Character string FIPS codes (state prefix) specific Census Places. NULL, Places within PSRC Region returned. acs.type character string either 'acs1', 'acs3' acs5'.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates — get_acs_recs","text":"tibble ACS estimates selected geography selected table codes. Includes variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates — get_acs_recs","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_recs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ACS Estimates — get_acs_recs","text":"","code":"get_acs_recs(geography = 'county',              table.names = c('B03002'),              years=c(2017,2019),              acs.type = 'acs1') #> Getting data from the 2017 1-year ACS #> The 1-year ACS provides data for geographies with populations of 65,000 and greater. #> Loading ACS1 variables for 2017 from table B03002. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset. #> Using FIPS code '53' for state 'Washington' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Getting data from the 2019 1-year ACS #> The 1-year ACS provides data for geographies with populations of 65,000 and greater. #> Loading ACS1 variables for 2019 from table B03002. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset. #> Using FIPS code '53' for state 'Washington' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> # A tibble: 210 × 14 #>    GEOID name       state variable estimate   moe label concept census_geography #>    <chr> <chr>      <chr> <chr>       <dbl> <dbl> <chr> <chr>   <chr>            #>  1 53033 King Coun… Wash… B03002_…  2188649    NA Esti… HISPAN… County           #>  2 53033 King Coun… Wash… B03002_…  1976237    NA Esti… HISPAN… County           #>  3 53033 King Coun… Wash… B03002_…  1309568  1385 Esti… HISPAN… County           #>  4 53033 King Coun… Wash… B03002_…   133498  5330 Esti… HISPAN… County           #>  5 53033 King Coun… Wash… B03002_…     8058  1683 Esti… HISPAN… County           #>  6 53033 King Coun… Wash… B03002_…   379302  5696 Esti… HISPAN… County           #>  7 53033 King Coun… Wash… B03002_…    16765  1987 Esti… HISPAN… County           #>  8 53033 King Coun… Wash… B03002_…     7055  2296 Esti… HISPAN… County           #>  9 53033 King Coun… Wash… B03002_…   121991  8954 Esti… HISPAN… County           #> 10 53033 King Coun… Wash… B03002_…     3853  1480 Esti… HISPAN… County           #> # ℹ 200 more rows #> # ℹ 5 more variables: acs_type <chr>, year <dbl>, se <dbl>, cv <dbl>, #> #   reliability <chr>  get_acs_recs(geography = 'county',              table.names = c(\"C17002\"),              counties=c(\"Kitsap\"),              years=c(2019),              acs.type = 'acs5') #> Getting data from the 2015-2019 5-year ACS #> Loading ACS5 variables for 2019 from table C17002. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset. #> Using FIPS code '53' for state 'Washington' #> Using FIPS code '035' for 'Kitsap County' #> # A tibble: 8 × 14 #>   GEOID name        state variable estimate   moe label concept census_geography #>   <chr> <chr>       <chr> <chr>       <dbl> <dbl> <chr> <chr>   <chr>            #> 1 53035 Kitsap Cou… Wash… C17002_…   257272   703 Esti… RATIO … County           #> 2 53035 Kitsap Cou… Wash… C17002_…    10948   991 Esti… RATIO … County           #> 3 53035 Kitsap Cou… Wash… C17002_…    11456  1149 Esti… RATIO … County           #> 4 53035 Kitsap Cou… Wash… C17002_…     8101  1178 Esti… RATIO … County           #> 5 53035 Kitsap Cou… Wash… C17002_…     6950   861 Esti… RATIO … County           #> 6 53035 Kitsap Cou… Wash… C17002_…    12207  1176 Esti… RATIO … County           #> 7 53035 Kitsap Cou… Wash… C17002_…     5582   936 Esti… RATIO … County           #> 8 53035 Kitsap Cou… Wash… C17002_…   202028  1990 Esti… RATIO … County           #> # ℹ 5 more variables: acs_type <chr>, year <dbl>, se <dbl>, cv <dbl>, #> #   reliability <chr>"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_tract.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Estimates by Census Tract — get_acs_tract","title":"ACS Estimates by Census Tract — get_acs_tract","text":"Generate ACS 5yr estimates multiple tables Census Tracts multiple counties","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_tract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Estimates by Census Tract — get_acs_tract","text":"","code":"get_acs_tract(   state = \"Washington\",   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   table.names,   years )"},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_tract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS Estimates by Census Tract — get_acs_tract","text":"state character string state name abbreviation. Defaults Washington. counties character string vector counties. Defaults PSRC counties. table.names character string vector Census table codes. years numeric value vector years. ACS year equal greater 2010 latest available year.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_tract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS Estimates by Census Tract — get_acs_tract","text":"tibble acs estimates tracts selected table codes. Includes detailed variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_acs_tract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS Estimates by Census Tract — get_acs_tract","text":"Craig Helmann","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_msa.html","id":null,"dir":"Reference","previous_headings":"","what":"Decennial Estimates by MSA — get_decennial_msa","title":"Decennial Estimates by MSA — get_decennial_msa","text":"Generate decennial estimates multiple tables MSA(s).","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_msa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decennial Estimates by MSA — get_decennial_msa","text":"","code":"get_decennial_msa(table_codes, years, fips = NULL)"},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_msa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decennial Estimates by MSA — get_decennial_msa","text":"table_codes character string vector Census table codes. years Numeric vector numeric years. decennial year years equal greater 2000. fips Character value. Single code vector MSA fips codes.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_msa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decennial Estimates by MSA — get_decennial_msa","text":"tibble decennial estimates MSA(s) selected table codes. include variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_msa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decennial Estimates by MSA — get_decennial_msa","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_place.html","id":null,"dir":"Reference","previous_headings":"","what":"Decennial Estimates by Place — get_decennial_place","title":"Decennial Estimates by Place — get_decennial_place","text":"Generate decennial estimates multiple tables place(s).","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decennial Estimates by Place — get_decennial_place","text":"","code":"get_decennial_place(table_codes, years, fips = NULL, state = \"WA\")"},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decennial Estimates by Place — get_decennial_place","text":"table_codes character string vector Census table codes. years Numeric vector numeric years. decennial year years equal greater 2000. fips Character value. Single code vector place fips codes (including state prefix). NULL, Places within PSRC Region returned. state character string state abbreviation","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decennial Estimates by Place — get_decennial_place","text":"tibble decennial estimates place(s) selected table codes. include variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_place.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decennial Estimates by Place — get_decennial_place","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":null,"dir":"Reference","previous_headings":"","what":"Decennial Estimates — get_decennial_recs","title":"Decennial Estimates — get_decennial_recs","text":"Generate decennial estimates multiple tables tracts, counties, MSAs, places. Currently working SF1 tables.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decennial Estimates — get_decennial_recs","text":"","code":"get_decennial_recs(   geography,   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   sumfile = \"sf1\",   years,   variables = NULL,   table_codes = NULL,   fips = NULL )"},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decennial Estimates — get_decennial_recs","text":"geography character string either 'tract', 'county', 'block group', 'msa', 'place'. counties character string vector counties. Defaults PSRC counties. sumfile character string summary file use \"sf1\" \"dp\" years Numeric vector numeric years. decennial year years equal greater 2000. variables character string vector Census variables table_codes character string vector Census table codes, table code padded 0s \"H001\", opposed \"H1\" fips Character. Single code vector either MSA place fips codes.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decennial Estimates — get_decennial_recs","text":"tibble decennial estimates selected geography selected table codes. Includes variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decennial Estimates — get_decennial_recs","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_recs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decennial Estimates — get_decennial_recs","text":"","code":"tbl_names <- paste0('PCT020', LETTERS[1:6]) get_decennial_recs(geography = 'county', table_codes = tbl_names, years = 2010) #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020A. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020B. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020C. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020D. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020E. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020F. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> # A tibble: 160 × 8 #>    GEOID NAME                         variable  value county  year label concept #>    <chr> <chr>                        <chr>     <dbl> <chr>  <dbl> <chr> <chr>   #>  1 53033 King County, Washington      PCT020F0…   972 53033   2010 Total GROUP … #>  2 53035 Kitsap County, Washington    PCT020F0…   208 53035   2010 Total GROUP … #>  3 53053 Pierce County, Washington    PCT020F0…   381 53053   2010 Total GROUP … #>  4 53061 Snohomish County, Washington PCT020F0…   132 53061   2010 Total GROUP … #>  5 53033 King County, Washington      PCT020F0…   233 53033   2010 Tota… GROUP … #>  6 53035 Kitsap County, Washington    PCT020F0…     7 53035   2010 Tota… GROUP … #>  7 53053 Pierce County, Washington    PCT020F0…   208 53053   2010 Tota… GROUP … #>  8 53061 Snohomish County, Washington PCT020F0…    52 53061   2010 Tota… GROUP … #>  9 53033 King County, Washington      PCT020F0…   171 53033   2010 Tota… GROUP … #> 10 53035 Kitsap County, Washington    PCT020F0…     2 53035   2010 Tota… GROUP … #> # ℹ 150 more rows  get_decennial_recs(geography = 'county', table_codes = 'P001', years = c(2000, 2010)) #> Getting data from the 2000 decennial Census #> Loading SF1 variables for 2000 from table P001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table P001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #>  #> Concept for table codes may differ across Census years. Please double check with tidycensus::load_variables() #> # A tibble: 10 × 8 #>    GEOID  NAME                        variable  value county  year label concept #>    <chr>  <chr>                       <chr>     <dbl> <chr>  <dbl> <chr> <chr>   #>  1 53033  King County, Washington     P001001  1.93e6 53033   2010 Total TOTAL … #>  2 53035  Kitsap County, Washington   P001001  2.51e5 53035   2010 Total TOTAL … #>  3 53053  Pierce County, Washington   P001001  7.95e5 53053   2010 Total TOTAL … #>  4 53061  Snohomish County, Washingt… P001001  7.13e5 53061   2010 Total TOTAL … #>  5 REGION Region                      P001001  3.69e6 NA      2010 Total TOTAL … #>  6 53033  King County, Washington     P001001  1.74e6 53033   2000 Total TOTAL … #>  7 53035  Kitsap County, Washington   P001001  2.32e5 53035   2000 Total TOTAL … #>  8 53053  Pierce County, Washington   P001001  7.01e5 53053   2000 Total TOTAL … #>  9 53061  Snohomish County, Washingt… P001001  6.06e5 53061   2000 Total TOTAL … #> 10 REGION Region                      P001001  3.28e6 NA      2000 Total TOTAL …  get_decennial_recs(geography = 'tract', table_codes = tbl_names, years = 2010) #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020A. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020B. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020C. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020D. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020E. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT020F. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> # A tibble: 24,832 × 8 #>    GEOID       NAME                    variable value county  year label concept #>    <chr>       <chr>                   <chr>    <dbl> <chr>  <dbl> <chr> <chr>   #>  1 53033000100 Census Tract 1, King C… PCT020F…     0 53033   2010 Total GROUP … #>  2 53033000200 Census Tract 2, King C… PCT020F…     0 53033   2010 Total GROUP … #>  3 53033000300 Census Tract 3, King C… PCT020F…     0 53033   2010 Total GROUP … #>  4 53033000401 Census Tract 4.01, Kin… PCT020F…     0 53033   2010 Total GROUP … #>  5 53033000402 Census Tract 4.02, Kin… PCT020F…     1 53033   2010 Total GROUP … #>  6 53033000500 Census Tract 5, King C… PCT020F…     0 53033   2010 Total GROUP … #>  7 53033000600 Census Tract 6, King C… PCT020F…     0 53033   2010 Total GROUP … #>  8 53033000700 Census Tract 7, King C… PCT020F…     1 53033   2010 Total GROUP … #>  9 53033000800 Census Tract 8, King C… PCT020F…     0 53033   2010 Total GROUP … #> 10 53033000900 Census Tract 9, King C… PCT020F…     0 53033   2010 Total GROUP … #> # ℹ 24,822 more rows  get_decennial_recs(geography = 'place',                    table_codes = 'PCT013',                    years = 2010,                    fips = c(\"5363000\", \"5308850\")) #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table PCT013. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using Census Summary File 1 #> Using FIPS code '53' for state 'WA' #> Using Census Summary File 1 #> # A tibble: 98 × 7 #>    GEOID   NAME                     variable   value  year label         concept #>    <chr>   <chr>                    <chr>      <dbl> <dbl> <chr>         <chr>   #>  1 5308850 Burien city, Washington  PCT013001  33013  2010 Total         SEX BY… #>  2 5363000 Seattle city, Washington PCT013001 583735  2010 Total         SEX BY… #>  3 5308850 Burien city, Washington  PCT013002  16612  2010 Total!!Male   SEX BY… #>  4 5363000 Seattle city, Washington PCT013002 290243  2010 Total!!Male   SEX BY… #>  5 5308850 Burien city, Washington  PCT013003   1140  2010 Total!!Male!… SEX BY… #>  6 5363000 Seattle city, Washington PCT013003  16424  2010 Total!!Male!… SEX BY… #>  7 5308850 Burien city, Washington  PCT013004   1065  2010 Total!!Male!… SEX BY… #>  8 5363000 Seattle city, Washington PCT013004  12919  2010 Total!!Male!… SEX BY… #>  9 5308850 Burien city, Washington  PCT013005    947  2010 Total!!Male!… SEX BY… #> 10 5363000 Seattle city, Washington PCT013005  10989  2010 Total!!Male!… SEX BY… #> # ℹ 88 more rows  get_decennial_recs(geography = 'msa',                    table_codes = c(\"H001\", \"P001\"),                    years = c(2000, 2010),                    fips = c('42660', \"28420\")) #> Getting data from the 2000 decennial Census #> Loading SF1 variables for 2000 from table H001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Error : Your API call has errors.  The API message returned is error: unknown/unsupported geography heirarchy. #> Variables not found in Summary File 1. Trying Summary File 3... #> [1] \"API error, the year 2000 requested may not be available.\" #> Getting data from the 2000 decennial Census #> Loading SF1 variables for 2000 from table P001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Error : Your API call has errors.  The API message returned is error: unknown/unsupported geography heirarchy. #> Variables not found in Summary File 1. Trying Summary File 3... #> [1] \"API error, the year 2000 requested may not be available.\" #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table H001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table P001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using Census Summary File 1 #>  #> Concept for table codes may differ across Census years. Please double check with tidycensus::load_variables() #> # A tibble: 4 × 7 #>   GEOID NAME                                 variable  value  year label concept #>   <chr> <chr>                                <chr>     <dbl> <dbl> <chr> <chr>   #> 1 28420 Kennewick-Pasco-Richland, WA Metro … H001001  9.30e4  2010 Total HOUSIN… #> 2 42660 Seattle-Tacoma-Bellevue, WA Metro A… H001001  1.46e6  2010 Total HOUSIN… #> 3 28420 Kennewick-Pasco-Richland, WA Metro … P001001  2.53e5  2010 Total TOTAL … #> 4 42660 Seattle-Tacoma-Bellevue, WA Metro A… P001001  3.44e6  2010 Total TOTAL …  get_decennial_recs(geography = 'block group',                    table_codes = c('H001', 'H006'),                    years = 2010) #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table H001. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> Getting data from the 2010 decennial Census #> Loading SF1 variables for 2010 from table H006. To cache this dataset for faster access to Census tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per Census dataset. #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using Census Summary File 1 #> # A tibble: 21,176 × 8 #>    GEOID        NAME                   variable value county  year label concept #>    <chr>        <chr>                  <chr>    <dbl> <chr>  <dbl> <chr> <chr>   #>  1 530330001001 Block Group 1, Census… H006001    528 53033   2010 Total RACE O… #>  2 530330001002 Block Group 2, Census… H006001    591 53033   2010 Total RACE O… #>  3 530330001003 Block Group 3, Census… H006001    691 53033   2010 Total RACE O… #>  4 530330001004 Block Group 4, Census… H006001    769 53033   2010 Total RACE O… #>  5 530330001005 Block Group 5, Census… H006001    567 53033   2010 Total RACE O… #>  6 530330002001 Block Group 1, Census… H006001    429 53033   2010 Total RACE O… #>  7 530330002002 Block Group 2, Census… H006001    552 53033   2010 Total RACE O… #>  8 530330002003 Block Group 3, Census… H006001    781 53033   2010 Total RACE O… #>  9 530330002004 Block Group 4, Census… H006001    541 53033   2010 Total RACE O… #> 10 530330002005 Block Group 5, Census… H006001    669 53033   2010 Total RACE O… #> # ℹ 21,166 more rows  get_decennial_recs(geography=\"tract\",                    variables=\"DP1_0092C\",                    years=2020, sumfile=\"dp\") #> Getting data from the 2020 decennial Census #> Using FIPS code '53' for state 'WA' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' #> Using the Demographic Profile #> Note: 2020 decennial Census data use differential privacy, a technique that #> introduces errors into data to preserve respondent confidentiality. #> ℹ Small counts should be interpreted with caution. #> ℹ See https://www.census.gov/library/fact-sheets/2021/protecting-the-confidentiality-of-the-2020-census-redistricting-data.html for additional guidance. #> This message is displayed once per session. #> # A tibble: 923 × 8 #>    GEOID       NAME                    variable value county  year label concept #>    <chr>       <chr>                   <chr>    <dbl> <chr>  <dbl> <chr> <chr>   #>  1 53033000101 Census Tract 1.01; Kin… DP1_009…  3759 53033   2020 Coun… PROFIL… #>  2 53033000102 Census Tract 1.02; Kin… DP1_009…  4321 53033   2020 Coun… PROFIL… #>  3 53033000201 Census Tract 2.01; Kin… DP1_009…  4416 53033   2020 Coun… PROFIL… #>  4 53033000202 Census Tract 2.02; Kin… DP1_009…  4099 53033   2020 Coun… PROFIL… #>  5 53033000300 Census Tract 3; King C… DP1_009…  2820 53033   2020 Coun… PROFIL… #>  6 53033000402 Census Tract 4.02; Kin… DP1_009…  5174 53033   2020 Coun… PROFIL… #>  7 53033000403 Census Tract 4.03; Kin… DP1_009…  3074 53033   2020 Coun… PROFIL… #>  8 53033000404 Census Tract 4.04; Kin… DP1_009…  4067 53033   2020 Coun… PROFIL… #>  9 53033000500 Census Tract 5; King C… DP1_009…  3400 53033   2020 Coun… PROFIL… #> 10 53033000601 Census Tract 6.01; Kin… DP1_009…  4074 53033   2020 Coun… PROFIL… #> # ℹ 913 more rows"},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_tract_county_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","title":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","text":"Generate decennial estimates multiple tables multiple tracts /counties","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_tract_county_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","text":"","code":"get_decennial_tract_county_bg(   geography,   counties = c(\"King\", \"Kitsap\", \"Pierce\", \"Snohomish\"),   variables,   table_codes,   years,   state = \"WA\",   sumfile )"},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_tract_county_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","text":"geography character string either 'tract', 'county', 'block group'. counties character string vector counties. Defaults PSRC counties. variables character string vector Census variables table_codes character string vector Census table codes. years Numeric vector numeric years. decennial year years equal greater 2000. state character string state abbreviation sumfile character string summary file use \"sf1\" \"dp\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_tract_county_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","text":"tibble decennial estimates either tracts county/counties selected table codes years. include variable names.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_decennial_tract_county_bg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decennial Estimates by Tract or Block Group and County — get_decennial_tract_county_bg","text":"Christy Lam","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_places.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve set of Census Places within the PSRC region — get_psrc_places","title":"Retrieve set of Census Places within the PSRC region — get_psrc_places","text":"Retrieve set Census Places within PSRC region","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_places.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve set of Census Places within the PSRC region — get_psrc_places","text":"","code":"get_psrc_places(year)"},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_places.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve set of Census Places within the PSRC region — get_psrc_places","text":"year census geography","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_places.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve set of Census Places within the PSRC region — get_psrc_places","text":"string vector Place FIPS codes","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_places.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve set of Census Places within the PSRC region — get_psrc_places","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and assemble PUMS data — get_psrc_pums","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"primary PUMS function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"","code":"get_psrc_pums(span, dyear, level, vars, dir = NULL, labels = TRUE)"},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"span Either 1 acs1 5 acs5 dyear data year level Either \"p\" \"h\", \"persons\" \"households\" respectively vars PUMS variable/s UPPERCASE string element list dir Directory .gz file, already downloaded. Default NULL uses Census ftp. labels Default TRUE, recodes varible values corresponding label","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"srvyr object appropriate sampling weight replication weights","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/get_psrc_pums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and assemble PUMS data — get_psrc_pums","text":"","code":"if (FALSE) { get_psrc_pums(span=1, dyear=2019, level=\"p\", vars=c(\"AGEP\",\"SEX\"))}"},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":null,"dir":"Reference","previous_headings":"","what":"Group ACS or Census Data — group_recs","title":"Group ACS or Census Data — group_recs","text":"Group ACS Census Data pre-defined commonly used groupings, stored file: inst/extdata/variables_groupings.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group ACS or Census Data — group_recs","text":"","code":"group_recs(tbl, this_group_name)"},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group ACS or Census Data — group_recs","text":"tbl data frame census acs data this_group_name character string describes grouping data. match group_name variables_cats table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group ACS or Census Data — group_recs","text":"tibble grouped ACS Census estimates","code":""},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group ACS or Census Data — group_recs","text":"Suzanne Childress","code":""},{"path":"https://psrc.github.io/psrccensus/reference/group_recs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group ACS or Census Data — group_recs","text":"","code":"inc_poverty<-get_acs_recs(geography = 'county',                          table.names = c('C17002'),                          years=c(2019),                          acs.type = 'acs5') #> Getting data from the 2015-2019 5-year ACS #> Loading ACS5 variables for 2019 from table C17002. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset. #> Using FIPS code '53' for state 'Washington' #> Using FIPS code '033' for 'King County' #> Using FIPS code '035' for 'Kitsap County' #> Using FIPS code '053' for 'Pierce County' #> Using FIPS code '061' for 'Snohomish County' group_recs(inc_poverty, 'Poverty Group 100 Percent') #> # A tibble: 15 × 6 #> # Groups:   GEOID, name, grouping [15] #>    GEOID  name             grouping   group_name                estimate    moe #>    <chr>  <chr>            <chr>      <chr>                        <dbl>  <dbl> #>  1 53033  King County      Over 100%  Poverty Group 100 Percent  1971959  9778. #>  2 53033  King County      Total      Poverty Group 100 Percent  2165562  1132  #>  3 53033  King County      Under 100% Poverty Group 100 Percent   193603  5334. #>  4 53035  Kitsap County    Over 100%  Poverty Group 100 Percent   234868  2889. #>  5 53035  Kitsap County    Total      Poverty Group 100 Percent   257272   703  #>  6 53035  Kitsap County    Under 100% Poverty Group 100 Percent    22404  1517. #>  7 53053  Pierce County    Over 100%  Poverty Group 100 Percent   770285  7055. #>  8 53053  Pierce County    Total      Poverty Group 100 Percent   859999  1014  #>  9 53053  Pierce County    Under 100% Poverty Group 100 Percent    89714  3637. #> 10 53061  Snohomish County Over 100%  Poverty Group 100 Percent   728130  5771. #> 11 53061  Snohomish County Total      Poverty Group 100 Percent   787169   902  #> 12 53061  Snohomish County Under 100% Poverty Group 100 Percent    59039  2696. #> 13 REGION Region           Over 100%  Poverty Group 100 Percent  3705242 13676. #> 14 REGION Region           Total      Poverty Group 100 Percent  4070002  1902. #> 15 REGION Region           Under 100% Poverty Group 100 Percent   364760  7159."},{"path":"https://psrc.github.io/psrccensus/reference/label_acs_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Label ACS variables — label_acs_variables","title":"Label ACS variables — label_acs_variables","text":"Helper function provide variable labels concept--.e. topic--alongside codes","code":""},{"path":"https://psrc.github.io/psrccensus/reference/label_acs_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label ACS variables — label_acs_variables","text":"","code":"label_acs_variables(df, table.name, year, acs.type)"},{"path":"https://psrc.github.io/psrccensus/reference/label_acs_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label ACS variables — label_acs_variables","text":"df dataframe Census API result table.name Census table code year year--last year--ACS survey acs.type either acs1 acs5","code":""},{"path":"https://psrc.github.io/psrccensus/reference/label_acs_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label ACS variables — label_acs_variables","text":"dataframe labels appended","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pce_deflator.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve annual Personal Consumption Expenditures deflator ratio — pce_deflator","title":"Retrieve annual Personal Consumption Expenditures deflator ratio — pce_deflator","text":"Applies PCE deflator yield real values specified dollar-year terms Helpful comparing separate surveys Requires [St. Louis Federal Reserve (FRED) API key](http://sboysel.github.io/fredr/articles/fredr.html#authentication)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pce_deflator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve annual Personal Consumption Expenditures deflator ratio — pce_deflator","text":"","code":"pce_deflator(have_yr, want_yr)"},{"path":"https://psrc.github.io/psrccensus/reference/pce_deflator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve annual Personal Consumption Expenditures deflator ratio — pce_deflator","text":"have_yr existing dollar year basis want_yr dollar year want basis shifted","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pce_deflator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve annual Personal Consumption Expenditures deflator ratio — pce_deflator","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrccensus.html","id":null,"dir":"Reference","previous_headings":"","what":"psrccensus: A package for easy compilation of census estimates for the Puget Sound Region. — psrccensus","title":"psrccensus: A package for easy compilation of census estimates for the Puget Sound Region. — psrccensus","text":"package provides functions easily collect census estimates across geographies within Central Puget Sound region. works Decennial, ACS PUMS datasets","code":""},{"path":[]},{"path":"https://psrc.github.io/psrccensus/reference/psrccensus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"psrccensus: A package for easy compilation of census estimates for the Puget Sound Region. — psrccensus","text":"Christy Lam clam@psrc.org","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bincome.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC standard broad income groupings — psrc_bincome","title":"PSRC standard broad income groupings — psrc_bincome","text":"PSRC standard broad income groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bincome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC standard broad income groupings — psrc_bincome","text":"","code":"psrc_bincome(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bincome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC standard broad income groupings — psrc_bincome","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bincome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC standard broad income groupings — psrc_bincome","text":"data.table additional binned household income field, \"BINCOME\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bincome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC standard broad income groupings — psrc_bincome","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_age.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC standard age groupings — psrc_bin_age","title":"PSRC standard age groupings — psrc_bin_age","text":"PSRC standard age groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC standard age groupings — psrc_bin_age","text":"","code":"psrc_bin_age(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC standard age groupings — psrc_bin_age","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC standard age groupings — psrc_bin_age","text":"data.table additional binned age field, \"BIN_AGE\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_age.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC standard age groupings — psrc_bin_age","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_povratio.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC income to poverty ratio groupings — psrc_bin_povratio","title":"PSRC income to poverty ratio groupings — psrc_bin_povratio","text":"PSRC income poverty ratio groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_povratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC income to poverty ratio groupings — psrc_bin_povratio","text":"","code":"psrc_bin_povratio(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_povratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC income to poverty ratio groupings — psrc_bin_povratio","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_povratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC income to poverty ratio groupings — psrc_bin_povratio","text":"data.table additional binned age field, \"BIN_POVRATIO\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_povratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC income to poverty ratio groupings — psrc_bin_povratio","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_ybl.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS year structure built groupings — psrc_bin_ybl","title":"ACS year structure built groupings — psrc_bin_ybl","text":"ACS year structure built groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_ybl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS year structure built groupings — psrc_bin_ybl","text":"","code":"psrc_bin_ybl(dt, dyear)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_ybl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS year structure built groupings — psrc_bin_ybl","text":"dt data.table dyear data year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_ybl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS year structure built groupings — psrc_bin_ybl","text":"data.table additional binned age field, \"BIN_YBL\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_bin_ybl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ACS year structure built groupings — psrc_bin_ybl","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_ed_attain.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC educational attainment groupings — psrc_ed_attain","title":"PSRC educational attainment groupings — psrc_ed_attain","text":"PSRC educational attainment groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_ed_attain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC educational attainment groupings — psrc_ed_attain","text":"","code":"psrc_ed_attain(dt, dyear)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_ed_attain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC educational attainment groupings — psrc_ed_attain","text":"dt data.table dyear data year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_ed_attain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC educational attainment groupings — psrc_ed_attain","text":"data.table educational attainment field, \"ED_ATTAIN\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_ed_attain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC educational attainment groupings — psrc_ed_attain","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_lum_jobsector.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","title":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","text":"PSRC Land Use Modeling employment sector","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_lum_jobsector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","text":"","code":"psrc_lum_jobsector(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_lum_jobsector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_lum_jobsector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","text":"data.table modeling employment sector, \"LUM_JOBSECTOR\"                         # NAICS changes, new dyear/definition set added","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_lum_jobsector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC Land Use Modeling employment sector — psrc_lum_jobsector","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_mi_jobsector.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC manufacturing-industrial category — psrc_mi_jobsector","title":"PSRC manufacturing-industrial category — psrc_mi_jobsector","text":"PSRC manufacturing-industrial category","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_mi_jobsector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC manufacturing-industrial category — psrc_mi_jobsector","text":"","code":"psrc_mi_jobsector(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_mi_jobsector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC manufacturing-industrial category — psrc_mi_jobsector","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_mi_jobsector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC manufacturing-industrial category — psrc_mi_jobsector","text":"data.table manufacturing-industrial category field, \"MI_JOBSECTOR\"             # NAICS changes, new dyear/definition set added","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_mi_jobsector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC manufacturing-industrial category — psrc_mi_jobsector","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_own_rent.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC tenure groupings — psrc_own_rent","title":"PSRC tenure groupings — psrc_own_rent","text":"PSRC tenure groupings","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_own_rent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC tenure groupings — psrc_own_rent","text":"","code":"psrc_own_rent(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_own_rent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC tenure groupings — psrc_own_rent","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_own_rent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC tenure groupings — psrc_own_rent","text":"data.table dichotomous tenure field, \"OWN_RENT\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_own_rent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC tenure groupings — psrc_own_rent","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_pums_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic call for PUMS summary statistics — psrc_pums_stat","title":"Generic call for PUMS summary statistics — psrc_pums_stat","text":"Given specific form related pums_stat functions.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_pums_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic call for PUMS summary statistics — psrc_pums_stat","text":"","code":"psrc_pums_stat(so, stat_type, stat_var, group_vars, incl_na = TRUE, rr = FALSE)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_pums_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic call for PUMS summary statistics — psrc_pums_stat","text":"srvyr object returned get_psrc_pums stat_type Desired survey statistic stat_var numeric variable summarize group_vars Factor variable/s grouping, UPPERCASE string element list incl_na option remove NA group_vars (FALSE, total may reflect full dataset) rr optional relative reliability column, .e. coefficient variation category levels (breakpoints: .15/.3./.5 -> good/fair/weak/unreliable)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_pums_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic call for PUMS summary statistics — psrc_pums_stat","text":"summary tibble, including variable names, summary statistic margin error","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_pums_stat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic call for PUMS summary statistics — psrc_pums_stat","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_standard_jobsector.html","id":null,"dir":"Reference","previous_headings":"","what":"PSRC Standard Published products employment sector — psrc_standard_jobsector","title":"PSRC Standard Published products employment sector — psrc_standard_jobsector","text":"PSRC Standard Published products employment sector","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_standard_jobsector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSRC Standard Published products employment sector — psrc_standard_jobsector","text":"","code":"psrc_standard_jobsector(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/psrc_standard_jobsector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PSRC Standard Published products employment sector — psrc_standard_jobsector","text":"dt data.table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_standard_jobsector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PSRC Standard Published products employment sector — psrc_standard_jobsector","text":"data.table standard published covered employment sector, \"STANDARD_JOBSECTOR\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/psrc_standard_jobsector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PSRC Standard Published products employment sector — psrc_standard_jobsector","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_api_gofer.html","id":null,"dir":"Reference","previous_headings":"","what":"PUMS API go-fer — pums_api_gofer","title":"PUMS API go-fer — pums_api_gofer","text":"Call Census Bureau Microdata API Helper get_psrc_pums function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_api_gofer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PUMS API go-fer — pums_api_gofer","text":"","code":"pums_api_gofer(span, dyear, level, vars)"},{"path":"https://psrc.github.io/psrccensus/reference/pums_api_gofer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PUMS API go-fer — pums_api_gofer","text":"span Either 1 acs1 5 acs5 dyear data year level Either \"p\" \"h\", \"persons\" \"households\" respectively vars PUMS variable/s UPPERCASE string element list","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_api_gofer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PUMS API go-fer — pums_api_gofer","text":"data.table requested variables, sample & replication weights, needed, inflation adjustments","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_api_gofer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PUMS API go-fer — pums_api_gofer","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_bulk_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"PUMS bulk summary statistics — pums_bulk_stat","title":"PUMS bulk summary statistics — pums_bulk_stat","text":"Generate statistic separately list grouping variables List input items can multiple, .e. character vector","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_bulk_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PUMS bulk summary statistics — pums_bulk_stat","text":"","code":"pums_bulk_stat(   so,   stat_type,   stat_var = NULL,   group_var_list,   incl_na = TRUE,   rr = FALSE )"},{"path":"https://psrc.github.io/psrccensus/reference/pums_bulk_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PUMS bulk summary statistics — pums_bulk_stat","text":"srvyr object returned get_psrc_pums stat_type Desired survey statistic stat_var numeric variable summarize group_var_list List list item grouping variable set grouping variables incl_na option remove NA group_vars (FALSE, total may reflect full dataset) rr optional relative reliability column, .e. coefficient variation category levels (breakpoints: .15/.3./.5 -> good/fair/weak/unreliable)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_bulk_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PUMS bulk summary statistics — pums_bulk_stat","text":"table variable names labels, summary statistic margin error","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_bulk_stat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PUMS bulk summary statistics — pums_bulk_stat","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_ftp_gofer.html","id":null,"dir":"Reference","previous_headings":"","what":"PUMS ftp go-fer — pums_ftp_gofer","title":"PUMS ftp go-fer — pums_ftp_gofer","text":"Download & filter data Census Bureau Microdata ftp server Helper get_psrc_pums function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_ftp_gofer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PUMS ftp go-fer — pums_ftp_gofer","text":"","code":"pums_ftp_gofer(span, dyear, level, vars, dir = NULL)"},{"path":"https://psrc.github.io/psrccensus/reference/pums_ftp_gofer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PUMS ftp go-fer — pums_ftp_gofer","text":"span Either 1 acs1 5 acs5 dyear data year level Either \"p\" \"h\", \"persons\" \"households\" respectively vars PUMS variable/s UPPERCASE string element list dir Directory .gz file, already downloaded. Default NULL uses Census ftp.","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_ftp_gofer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PUMS ftp go-fer — pums_ftp_gofer","text":"data.table requested variables, sample & replication weights, needed, inflation adjustments","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_ftp_gofer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PUMS ftp go-fer — pums_ftp_gofer","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_recode_na.html","id":null,"dir":"Reference","previous_headings":"","what":"NA recode for PUMS — pums_recode_na","title":"NA recode for PUMS — pums_recode_na","text":"Helper get_psrc_pums function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_recode_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA recode for PUMS — pums_recode_na","text":"","code":"pums_recode_na(dt)"},{"path":"https://psrc.github.io/psrccensus/reference/pums_recode_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA recode for PUMS — pums_recode_na","text":"dt data.table Census Bureau \"N/\" code--\"b\" \"bbb...\"","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_recode_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NA recode for PUMS — pums_recode_na","text":"filtered input data.table values \"b\" recoded NA","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_recode_na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NA recode for PUMS — pums_recode_na","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"PUMS summary statistics — pums_stat","title":"PUMS summary statistics — pums_stat","text":"Separate function total, count, median, mean","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PUMS summary statistics — pums_stat","text":"","code":"psrc_pums_count(   so,   stat_var = NULL,   group_vars = NULL,   incl_na = TRUE,   rr = FALSE )  psrc_pums_sum(so, stat_var, group_vars = NULL, incl_na = TRUE, rr = FALSE)  psrc_pums_median(so, stat_var, group_vars = NULL, incl_na = TRUE, rr = FALSE)  psrc_pums_mean(so, stat_var, group_vars = NULL, incl_na = TRUE, rr = FALSE)  psrc_pums_summary(so, stat_var, group_vars = NULL, incl_na = TRUE, rr = FALSE)"},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PUMS summary statistics — pums_stat","text":"srvyr object returned get_psrc_pums stat_var numeric variable summarize group_vars Factor variable/s grouping, UPPERCASE string element list incl_na option remove NA group_vars (FALSE, total may reflect full dataset) rr optional relative reliability column, .e. coefficient variation category levels (breakpoints: .15/.3./.5 -> good/fair/weak/unreliable)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PUMS summary statistics — pums_stat","text":"table variable names labels, summary statistic margin error","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PUMS summary statistics — pums_stat","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PUMS summary statistics — pums_stat","text":"","code":"if (FALSE) { library(magrittr) so <- get_psrc_pums(1, 2019, \"h\", c(\"HINCP\", \"TEN\")) rs <- psrc_pums_median(so, \"HINCP\", \"TEN\") }"},{"path":"https://psrc.github.io/psrccensus/reference/pums_varsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Search PUMS variable definitions — pums_varsearch","title":"Search PUMS variable definitions — pums_varsearch","text":"Look var_code via search term","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_varsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search PUMS variable definitions — pums_varsearch","text":"","code":"pums_varsearch(regex)"},{"path":"https://psrc.github.io/psrccensus/reference/pums_varsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search PUMS variable definitions — pums_varsearch","text":"regex search term","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_varsearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search PUMS variable definitions — pums_varsearch","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/pums_varsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search PUMS variable definitions — pums_varsearch","text":"","code":"# All variables related to internet; shows code changed in 2020 survey pums_varsearch(\"internet\") #>      var_code #>        <char> #> 1:     ACCESS #> 2:    HISPEED #> 3:   OTHSVCEX #> 4:  SATELLITE #> 5: ACCESSINET #>                                                                             var_label #>                                                                                <char> #> 1:                                                             Access to the Internet #> 2: Broadband (high speed) Internet service such as cable, fiber optic, or DSL service #> 3:                                                             Other Internet service #> 4:                                                         Satellite Internet service #> 5:                                                             Access to the Internet #>                            years #>                           <char> #> 1:                2017,2018,2019 #> 2: 2017,2018,2019,2021,2022,2020 #> 3: 2017,2018,2019,2021,2022,2020 #> 4: 2017,2018,2019,2021,2022,2020 #> 5:                2021,2022,2020  # Entry for specific variable, 'Employment Status Recode' pums_varsearch(\"^ESR$\") #>    var_code                var_label                         years #>      <char>                   <char>                        <char> #> 1:      ESR Employment status recode 2017,2018,2019,2021,2022,2020"},{"path":"https://psrc.github.io/psrccensus/reference/read_pums.html","id":null,"dir":"Reference","previous_headings":"","what":"Read PUMS csv — read_pums","title":"Read PUMS csv — read_pums","text":"Helper pums_ftp_gofer function","code":""},{"path":"https://psrc.github.io/psrccensus/reference/read_pums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read PUMS csv — read_pums","text":"","code":"read_pums(target_file, dyear)"},{"path":"https://psrc.github.io/psrccensus/reference/read_pums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read PUMS csv — read_pums","text":"target_file either .csv ftp site, compressed .gz file server dyear data year","code":""},{"path":"https://psrc.github.io/psrccensus/reference/read_pums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read PUMS csv — read_pums","text":"unzipped table","code":""},{"path":"https://psrc.github.io/psrccensus/reference/read_pums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read PUMS csv — read_pums","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/real_dollars.html","id":null,"dir":"Reference","previous_headings":"","what":"PUMS inflation adjustment to a year other than the survey year — real_dollars","title":"PUMS inflation adjustment to a year other than the survey year — real_dollars","text":"Applies PCE deflator yield real values specified dollar-year terms Helpful comparing separate surveys Requires [St. Louis Federal Reserve (FRED) API key](http://sboysel.github.io/fredr/articles/fredr.html#authentication)","code":""},{"path":"https://psrc.github.io/psrccensus/reference/real_dollars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PUMS inflation adjustment to a year other than the survey year — real_dollars","text":"","code":"real_dollars(so, refyear)"},{"path":"https://psrc.github.io/psrccensus/reference/real_dollars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PUMS inflation adjustment to a year other than the survey year — real_dollars","text":"srvyr object returned get_psrc_pums refyear dollar year value returned returned","code":""},{"path":"https://psrc.github.io/psrccensus/reference/real_dollars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PUMS inflation adjustment to a year other than the survey year — real_dollars","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/reliability_calcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add estimate reliability information — reliability_calcs","title":"Add estimate reliability information — reliability_calcs","text":"gathering data, add reliability information using moe estimate","code":""},{"path":"https://psrc.github.io/psrccensus/reference/reliability_calcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add estimate reliability information — reliability_calcs","text":"","code":"reliability_calcs(dfs, moe = \"moe\", estimate = \"estimate\")"},{"path":"https://psrc.github.io/psrccensus/reference/reliability_calcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add estimate reliability information — reliability_calcs","text":"dfs data frames already retrieved api, created user moe character name column contains margin error estimates estimate character name column contains data value estimates","code":""},{"path":"https://psrc.github.io/psrccensus/reference/reliability_calcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add estimate reliability information — reliability_calcs","text":"data frames new columns se, cv, reliability","code":""},{"path":"https://psrc.github.io/psrccensus/reference/reliability_calcs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add estimate reliability information — reliability_calcs","text":"Suzanne","code":""},{"path":"https://psrc.github.io/psrccensus/reference/use_geography_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","title":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","text":"Helper translate psrccensus estimates planning geographies","code":""},{"path":"https://psrc.github.io/psrccensus/reference/use_geography_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","text":"","code":"use_geography_splits(   df,   planning_geog_type,   wgt = \"total_pop\",   agg_fct = \"sum\" )"},{"path":"https://psrc.github.io/psrccensus/reference/use_geography_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","text":"df acs decennial dataset returned psrccensus planning_geog_type planning geography type listed Elmer.general.geography_splits wgt measure share used split weight either \"total_pop\" (default), \"household_pop\", \"group_quarters_pop\", \"housing_units\" \"occupied_housing_units\" agg_fct aggregation","code":""},{"path":"https://psrc.github.io/psrccensus/reference/use_geography_splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","text":"table planning geography units place census geography units","code":""},{"path":"https://psrc.github.io/psrccensus/reference/use_geography_splits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper to translate psrccensus estimates to planning geographies — use_geography_splits","text":"Michael Jensen","code":""},{"path":"https://psrc.github.io/psrccensus/reference/z_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Z Score — z_score","title":"Z Score — z_score","text":"Stat determine two estimates different","code":""},{"path":"https://psrc.github.io/psrccensus/reference/z_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Z Score — z_score","text":"","code":"z_score(x, y)"},{"path":"https://psrc.github.io/psrccensus/reference/z_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Z Score — z_score","text":"x numeric vector, first estimate corresponding MOE compare y numeric vector, second estimate corresponding MOE compare","code":""},{"path":"https://psrc.github.io/psrccensus/reference/z_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Z Score — z_score","text":"Z score; larger 1, difference significant","code":""},{"path":"https://psrc.github.io/psrccensus/reference/z_score.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Z Score — z_score","text":"Michael Jensen","code":""}]
